{"version":3,"file":"react-pdf.cjs.min.js","sources":["../src/elements/Root.js","../src/font/standard.js","../src/utils/font.js","../src/font/index.js","../src/layout/fontSubstitution/standardFont.js","../src/layout/fontSubstitution/index.js","../src/layout/linebreaker/linkedList.js","../src/layout/linebreaker/linebreak.js","../src/layout/linebreaker/formatter.js","../src/layout/linebreaker/index.js","../src/layout/index.js","../src/utils/jpeg.js","../src/utils/cache.js","../src/utils/image.js","../src/utils/emoji.js","../src/elements/Document.js","../src/elements/Node.js","../src/stylesheet/yogaValue.js","../src/stylesheet/transformUnits.js","../src/stylesheet/transformStyles.js","../src/stylesheet/index.js","../src/mixins/debug.js","../src/mixins/borders.js","../src/mixins/transform.js","../src/utils/styles.js","../src/elements/Base.js","../src/elements/TextInstance.js","../src/utils/pageSizes.js","../src/mixins/ruler.js","../src/elements/Page.js","../src/elements/View.js","../src/utils/url.js","../src/utils/ignorableChars.js","../src/utils/attributedString.js","../src/elements/Text.js","../src/elements/Link.js","../src/elements/Note.js","../src/elements/Image.js","../src/elements/index.js","../src/renderer.js","../src/index.js","../src/node.js"],"sourcesContent":["import PDFDocument from '@react-pdf/pdfkit';\n\nclass Root {\n  constructor() {\n    this.isDirty = false;\n    this.document = null;\n    this.instance = null;\n  }\n\n  get name() {\n    return 'Root';\n  }\n\n  appendChild(child) {\n    this.document = child;\n  }\n\n  markDirty() {\n    this.isDirty = true;\n  }\n\n  async render() {\n    this.instance = new PDFDocument({ autoFirstPage: false });\n    await this.document.render();\n    this.isDirty = false;\n  }\n}\n\nexport default Root;\n","export default [\n  'Courier',\n  'Courier-Bold',\n  'Courier-Oblique',\n  'Helvetica',\n  'Helvetica-Bold',\n  'Helvetica-Oblique',\n  'Times-Roman',\n  'Times-Bold',\n  'Times-Italic',\n];\n","import fetch from 'isomorphic-fetch';\n\nexport const fetchFont = src => {\n  return fetch(src)\n    .then(response => {\n      if (response.buffer) {\n        return response.buffer();\n      }\n      return response.arrayBuffer();\n    })\n    .then(arrayBuffer => Buffer.from(arrayBuffer));\n};\n","import isUrl from 'is-url';\nimport fontkit from '@react-pdf/fontkit';\nimport standardFonts from './standard';\nimport { fetchFont } from '../utils/font';\n\nlet fonts = {};\nlet emojiSource;\nlet hyphenationCallback;\n\nconst register = (src, { family, ...otherOptions }) => {\n  fonts[family] = {\n    src,\n    loaded: false,\n    loading: false,\n    data: null,\n    ...otherOptions,\n  };\n};\n\nconst registerHyphenationCallback = callback => {\n  hyphenationCallback = callback;\n};\n\nconst registerEmojiSource = ({ url, format = 'png' }) => {\n  emojiSource = { url, format };\n};\n\nconst getRegisteredFonts = () => Object.keys(fonts);\n\nconst getFont = family => fonts[family];\n\nconst getEmojiSource = () => emojiSource;\n\nconst getHyphenationCallback = () => hyphenationCallback;\n\nconst load = async function(fontFamily, doc) {\n  const font = fonts[fontFamily];\n\n  // We cache the font to avoid fetching it many time\n  if (font && !font.data && !font.loading) {\n    font.loading = true;\n\n    if (isUrl(font.src)) {\n      const data = await fetchFont(font.src);\n      font.data = fontkit.create(data);\n    } else {\n      font.data = fontkit.openSync(font.src);\n    }\n  }\n\n  // If the font wasn't added to the document yet (aka. loaded), we do.\n  // This prevents calling `registerFont` many times for the same font.\n  // Fonts loaded state will be resetted after document is closed.\n  if (font && !font.loaded) {\n    font.loaded = true;\n    font.loading = false;\n    doc.registerFont(fontFamily, font.data);\n  }\n\n  if (!font && !standardFonts.includes(fontFamily)) {\n    throw new Error(\n      `Font family not registered: ${fontFamily}. Please register it calling Font.register() method.`,\n    );\n  }\n};\n\nconst reset = function() {\n  for (const font in fonts) {\n    if (fonts.hasOwnProperty(font)) {\n      fonts[font].loaded = false;\n    }\n  }\n};\n\nconst clear = function() {\n  fonts = {};\n};\n\nexport default {\n  register,\n  getEmojiSource,\n  getRegisteredFonts,\n  registerEmojiSource,\n  registerHyphenationCallback,\n  getHyphenationCallback,\n  getFont,\n  load,\n  clear,\n  reset,\n};\n","import { PDFFont } from '@react-pdf/pdfkit';\n\nclass StandardFont {\n  constructor(src) {\n    this.name = src;\n    this.src = PDFFont.open(null, src);\n    this.glyphs = {};\n  }\n\n  layout(str) {\n    const [encoded, positions] = this.src.encode(str);\n\n    return {\n      positions,\n      stringIndices: positions.map((_, i) => i),\n      glyphs: encoded.map((g, i) => {\n        const glyph = this.getGlyph(parseInt(g, 16));\n        glyph.advanceWidth = positions[i].advanceWidth;\n        return glyph;\n      }),\n    };\n  }\n\n  glyphForCodePoint(codePoint) {\n    const glyph = this.getGlyph(codePoint);\n    glyph.advanceWidth = 400;\n    return glyph;\n  }\n\n  getGlyph(id) {\n    if (!this.glyphs[id]) {\n      this.glyphs[id] = this.src.font.characterToGlyph(id);\n    }\n\n    return {\n      id,\n      _font: this.src,\n      name: this.glyphs[id],\n    };\n  }\n\n  hasGlyphForCodePoint(codePoint) {\n    return this.src.font.characterToGlyph(codePoint) !== '.notdef';\n  }\n\n  get ascent() {\n    return this.src.ascender;\n  }\n\n  get descent() {\n    return this.src.descender;\n  }\n\n  get lineGap() {\n    return this.src.lineGap;\n  }\n\n  get unitsPerEm() {\n    return 1000;\n  }\n}\n\nexport default StandardFont;\n","import StandardFont from './standardFont';\n\nexport default () => ({ Run }) =>\n  class FontSubstitutionEngine {\n    constructor() {\n      this.fallbackFontInstance = null;\n    }\n\n    get fallbackFont() {\n      if (!this.fallbackFontInstance) {\n        this.fallbackFontInstance = new StandardFont('Helvetica');\n      }\n\n      return this.fallbackFontInstance;\n    }\n\n    getRuns(string, runs) {\n      const res = [];\n      let lastFont = null;\n      let lastIndex = 0;\n      let index = 0;\n\n      for (const run of runs) {\n        let defaultFont;\n\n        if (typeof run.attributes.font === 'string') {\n          defaultFont = new StandardFont(run.attributes.font);\n        } else {\n          defaultFont = run.attributes.font;\n        }\n\n        if (string.length === 0) {\n          res.push(new Run(0, 0, { font: defaultFont }));\n          break;\n        }\n\n        for (const char of string.slice(run.start, run.end)) {\n          const codePoint = char.codePointAt();\n          let font = defaultFont;\n\n          // If the default font does not have a glyph\n          // and the fallback font does, we use it\n          if (\n            !defaultFont.hasGlyphForCodePoint(codePoint) &&\n            this.fallbackFont.hasGlyphForCodePoint(codePoint)\n          ) {\n            font = this.fallbackFont;\n          }\n\n          if (font !== lastFont) {\n            if (lastFont) {\n              res.push(new Run(lastIndex, index, { font: lastFont }));\n            }\n\n            lastFont = font;\n            lastIndex = index;\n          }\n\n          index += char.length;\n        }\n      }\n\n      if (lastIndex < string.length) {\n        res.push(new Run(lastIndex, string.length, { font: lastFont }));\n      }\n\n      return res;\n    }\n  };\n","class Node {\n  constructor(data) {\n    this.prev = null;\n    this.next = null;\n    this.data = data;\n  }\n\n  toString() {\n    return this.data.toString();\n  }\n}\n\nclass LinkedList {\n  static Node = Node;\n\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this.listSize = 0;\n  }\n\n  isLinked(node) {\n    return !(\n      (node &&\n        node.prev === null &&\n        node.next === null &&\n        this.tail !== node &&\n        this.head !== node) ||\n      this.isEmpty()\n    );\n  }\n\n  size() {\n    return this.listSize;\n  }\n\n  isEmpty() {\n    return this.listSize === 0;\n  }\n\n  first() {\n    return this.head;\n  }\n\n  last() {\n    return this.last;\n  }\n\n  toString() {\n    return this.toArray().toString();\n  }\n\n  toArray() {\n    let node = this.head;\n    const result = [];\n\n    while (node !== null) {\n      result.push(node);\n      node = node.next;\n    }\n    return result;\n  }\n\n  forEach(fun) {\n    let node = this.head;\n\n    while (node !== null) {\n      fun(node);\n      node = node.next;\n    }\n  }\n\n  contains(n) {\n    let node = this.head;\n\n    if (!this.isLinked(n)) {\n      return false;\n    }\n    while (node !== null) {\n      if (node === n) {\n        return true;\n      }\n      node = node.next;\n    }\n    return false;\n  }\n\n  at(i) {\n    let node = this.head;\n    let index = 0;\n\n    if (i >= this.listLength || i < 0) {\n      return null;\n    }\n\n    while (node !== null) {\n      if (i === index) {\n        return node;\n      }\n      node = node.next;\n      index += 1;\n    }\n    return null;\n  }\n\n  insertAfter(node, newNode) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next === null) {\n      this.tail = newNode;\n    } else {\n      node.next.prev = newNode;\n    }\n    node.next = newNode;\n    this.listSize += 1;\n    return this;\n  }\n\n  insertBefore(node, newNode) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev === null) {\n      this.head = newNode;\n    } else {\n      node.prev.next = newNode;\n    }\n    node.prev = newNode;\n    this.listSize += 1;\n    return this;\n  }\n\n  push(node) {\n    if (this.head === null) {\n      this.unshift(node);\n    } else {\n      this.insertAfter(this.tail, node);\n    }\n    return this;\n  }\n\n  unshift(node) {\n    if (this.head === null) {\n      this.head = node;\n      this.tail = node;\n      node.prev = null;\n      node.next = null;\n      this.listSize += 1;\n    } else {\n      this.insertBefore(this.head, node);\n    }\n    return this;\n  }\n\n  remove(node) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    if (node.prev === null) {\n      this.head = node.next;\n    } else {\n      node.prev.next = node.next;\n    }\n    if (node.next === null) {\n      this.tail = node.prev;\n    } else {\n      node.next.prev = node.prev;\n    }\n    this.listSize -= 1;\n    return this;\n  }\n\n  pop() {\n    const node = this.tail;\n    this.tail.prev.next = null;\n    this.tail = this.tail.prev;\n    this.listSize -= 1;\n    node.prev = null;\n    node.next = null;\n    return node;\n  }\n\n  shift() {\n    const node = this.head;\n    this.head.next.prev = null;\n    this.head = this.head.next;\n    this.listSize -= 1;\n    node.prev = null;\n    node.next = null;\n    return node;\n  }\n}\n\nexport default LinkedList;\n","import LinkedList from './linkedList';\n\n/**\n * @preserve Knuth and Plass line breaking algorithm in JavaScript\n *\n * Licensed under the new BSD License.\n * Copyright 2009-2010, Bram Stein\n * All rights reserved.\n */\nconst linebreak = (nodes, lines, settings) => {\n  const options = {\n    demerits: {\n      line: (settings && settings.demerits && settings.demerits.line) || 10,\n      flagged:\n        (settings && settings.demerits && settings.demerits.flagged) || 100,\n      fitness:\n        (settings && settings.demerits && settings.demerits.fitness) || 3000,\n    },\n    tolerance: (settings && settings.tolerance) || 3,\n  };\n  const activeNodes = new LinkedList();\n  const sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0,\n  };\n  const lineLengths = lines;\n  const breaks = [];\n  let tmp = {\n    data: {\n      demerits: Infinity,\n    },\n  };\n\n  function breakpoint(\n    position,\n    demerits,\n    ratio,\n    line,\n    fitnessClass,\n    totals,\n    previous,\n  ) {\n    return {\n      position,\n      demerits,\n      ratio,\n      line,\n      fitnessClass,\n      totals: totals || {\n        width: 0,\n        stretch: 0,\n        shrink: 0,\n      },\n      previous,\n    };\n  }\n\n  function computeCost(start, end, active, currentLine) {\n    let width = sum.width - active.totals.width;\n    let stretch = 0;\n    let shrink = 0;\n    // If the current line index is within the list of linelengths, use it, otherwise use\n    // the last line length of the list.\n    const lineLength =\n      currentLine < lineLengths.length\n        ? lineLengths[currentLine - 1]\n        : lineLengths[lineLengths.length - 1];\n\n    if (nodes[end].type === 'penalty') {\n      width += nodes[end].width;\n    }\n\n    if (width < lineLength) {\n      // Calculate the stretch ratio\n      stretch = sum.stretch - active.totals.stretch;\n\n      if (stretch > 0) {\n        return (lineLength - width) / stretch;\n      }\n\n      return linebreak.infinity;\n    } else if (width > lineLength) {\n      // Calculate the shrink ratio\n      shrink = sum.shrink - active.totals.shrink;\n\n      if (shrink > 0) {\n        return (lineLength - width) / shrink;\n      }\n\n      return linebreak.infinity;\n    }\n\n    // perfect match\n    return 0;\n  }\n\n  // Add width, stretch and shrink values from the current\n  // break point up to the next box or forced penalty.\n  function computeSum(breakPointIndex) {\n    const result = {\n      width: sum.width,\n      stretch: sum.stretch,\n      shrink: sum.shrink,\n    };\n\n    for (let i = breakPointIndex; i < nodes.length; i += 1) {\n      if (nodes[i].type === 'glue') {\n        result.width += nodes[i].width;\n        result.stretch += nodes[i].stretch;\n        result.shrink += nodes[i].shrink;\n      } else if (\n        nodes[i].type === 'box' ||\n        (nodes[i].type === 'penalty' &&\n          nodes[i].penalty === -linebreak.infinity &&\n          i > breakPointIndex)\n      ) {\n        break;\n      }\n    }\n    return result;\n  }\n\n  // The main loop of the algorithm\n  function mainLoop(node, index, nodes) {\n    let active = activeNodes.first();\n    let next = null;\n    let ratio = 0;\n    let demerits = 0;\n    let candidates = [];\n    let badness;\n    let currentLine = 0;\n    let tmpSum;\n    let currentClass = 0;\n    let fitnessClass;\n    let candidate;\n    let newNode;\n\n    // The inner loop iterates through all the active nodes with line < currentLine and then\n    // breaks out to insert the new active node candidates before looking at the next active\n    // nodes for the next lines. The result of this is that the active node list is always\n    // sorted by line number.\n    while (active !== null) {\n      candidates = [\n        {\n          demerits: Infinity,\n        },\n        {\n          demerits: Infinity,\n        },\n        {\n          demerits: Infinity,\n        },\n        {\n          demerits: Infinity,\n        },\n      ];\n\n      // Iterate through the linked list of active nodes to find new potential active nodes\n      // and deactivate current active nodes.\n      while (active !== null) {\n        next = active.next;\n        currentLine = active.data.line + 1;\n        ratio = computeCost(\n          active.data.position,\n          index,\n          active.data,\n          currentLine,\n        );\n\n        // Deactive nodes when the distance between the current active node and the\n        // current node becomes too large (i.e. it exceeds the stretch limit and the stretch\n        // ratio becomes negative) or when the current node is a forced break (i.e. the end\n        // of the paragraph when we want to remove all active nodes, but possibly have a final\n        // candidate active node---if the paragraph can be set using the given tolerance value.)\n        if (\n          ratio < -1 ||\n          (node.type === 'penalty' && node.penalty === -linebreak.infinity)\n        ) {\n          activeNodes.remove(active);\n        }\n\n        // If the ratio is within the valid range of -1 <= ratio <= tolerance calculate the\n        // total demerits and record a candidate active node.\n        if (ratio >= -1 && ratio <= options.tolerance) {\n          badness = 100 * Math.pow(Math.abs(ratio), 3);\n\n          // Positive penalty\n          if (node.type === 'penalty' && node.penalty >= 0) {\n            demerits =\n              Math.pow(options.demerits.line + badness, 2) +\n              Math.pow(node.penalty, 2);\n            // Negative penalty but not a forced break\n          } else if (\n            node.type === 'penalty' &&\n            node.penalty !== -linebreak.infinity\n          ) {\n            demerits =\n              Math.pow(options.demerits.line + badness, 2) -\n              Math.pow(node.penalty, 2);\n            // All other cases\n          } else {\n            demerits = Math.pow(options.demerits.line + badness, 2);\n          }\n\n          if (\n            node.type === 'penalty' &&\n            nodes[active.data.position].type === 'penalty'\n          ) {\n            demerits +=\n              options.demerits.flagged *\n              node.flagged *\n              nodes[active.data.position].flagged;\n          }\n\n          // Calculate the fitness class for this candidate active node.\n          if (ratio < -0.5) {\n            currentClass = 0;\n          } else if (ratio <= 0.5) {\n            currentClass = 1;\n          } else if (ratio <= 1) {\n            currentClass = 2;\n          } else {\n            currentClass = 3;\n          }\n\n          // Add a fitness penalty to the demerits if the fitness classes of two adjacent lines\n          // differ too much.\n          if (Math.abs(currentClass - active.data.fitnessClass) > 1) {\n            demerits += options.demerits.fitness;\n          }\n\n          // Add the total demerits of the active node to get the total demerits of this candidate node.\n          demerits += active.data.demerits;\n\n          // Only store the best candidate for each fitness class\n          if (demerits < candidates[currentClass].demerits) {\n            candidates[currentClass] = {\n              active,\n              demerits,\n              ratio,\n            };\n          }\n        }\n\n        active = next;\n\n        // Stop iterating through active nodes to insert new candidate active nodes in the active list\n        // before moving on to the active nodes for the next line.\n        // TODO: The Knuth and Plass paper suggests a conditional for currentLine < j0. This means paragraphs\n        // with identical line lengths will not be sorted by line number. Find out if that is a desirable outcome.\n        // For now I left this out, as it only adds minimal overhead to the algorithm and keeping the active node\n        // list sorted has a higher priority.\n        if (active !== null && active.data.line >= currentLine) {\n          break;\n        }\n      }\n\n      tmpSum = computeSum(index);\n\n      for (\n        fitnessClass = 0;\n        fitnessClass < candidates.length;\n        fitnessClass += 1\n      ) {\n        candidate = candidates[fitnessClass];\n\n        if (candidate.demerits < Infinity) {\n          newNode = new LinkedList.Node(\n            breakpoint(\n              index,\n              candidate.demerits,\n              candidate.ratio,\n              candidate.active.data.line + 1,\n              fitnessClass,\n              tmpSum,\n              candidate.active,\n            ),\n          );\n          if (active !== null) {\n            activeNodes.insertBefore(active, newNode);\n          } else {\n            activeNodes.push(newNode);\n          }\n        }\n      }\n    }\n  }\n\n  // Add an active node for the start of the paragraph.\n  activeNodes.push(\n    new LinkedList.Node(breakpoint(0, 0, 0, 0, 0, undefined, null)),\n  );\n\n  nodes.forEach((node, index, nodes) => {\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      if (index > 0 && nodes[index - 1].type === 'box') {\n        mainLoop(node, index, nodes);\n      }\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    } else if (node.type === 'penalty' && node.penalty !== linebreak.infinity) {\n      mainLoop(node, index, nodes);\n    }\n  });\n\n  if (activeNodes.size() !== 0) {\n    // Find the best active node (the one with the least total demerits.)\n    activeNodes.forEach(node => {\n      if (node.data.demerits < tmp.data.demerits) {\n        tmp = node;\n      }\n    });\n\n    while (tmp !== null) {\n      breaks.push({\n        position: tmp.data.position,\n        ratio: tmp.data.ratio,\n      });\n      tmp = tmp.data.previous;\n    }\n    return breaks.reverse();\n  }\n  return [];\n};\n\nlinebreak.infinity = 10000;\n\nlinebreak.glue = (width, stretch, shrink) => ({\n  type: 'glue',\n  width,\n  stretch,\n  shrink,\n});\n\nlinebreak.box = (width, value, hyphenated = false) => ({\n  type: 'box',\n  width,\n  value,\n  hyphenated,\n});\n\nlinebreak.penalty = (width, penalty, flagged) => ({\n  type: 'penalty',\n  width,\n  penalty,\n  flagged,\n});\n\nexport default linebreak;\n","import english from 'hyphenation.en-us';\nimport Hypher from 'hypher';\nimport linebreak from './linebreak';\n\nconst SOFT_HYPHEN_HEX = '\\u00ad';\nconst NO_BREAK_SPACE_DECIMAL = 160;\n\nconst getWords = glyphString => {\n  const words = [];\n  const { start } = glyphString;\n  let lastIndex = 0;\n\n  for (const { index } of glyphString) {\n    const codePoint = glyphString.codePointAtGlyphIndex(index);\n\n    // Not break words in no-break-spaces\n    if (codePoint === NO_BREAK_SPACE_DECIMAL) {\n      continue;\n    }\n\n    if (glyphString.isWhiteSpace(index - start)) {\n      const word = glyphString.slice(lastIndex, index - start);\n\n      if (word.length > 0) {\n        words.push(word);\n      }\n\n      lastIndex = index - start + 1;\n    }\n  }\n\n  if (lastIndex < glyphString.end) {\n    const word = glyphString.slice(\n      lastIndex,\n      glyphString.end - glyphString.start,\n    );\n    words.push(word);\n  }\n\n  return words;\n};\n\nconst h = new Hypher(english);\nconst hyphenateString = string => {\n  if (string.includes(SOFT_HYPHEN_HEX)) {\n    return string.split(SOFT_HYPHEN_HEX);\n  }\n\n  return h.hyphenate(string);\n};\n\nconst hyphenateWord = glyphString => {\n  const hyphenated = hyphenateString(glyphString.string);\n\n  let index = 0;\n  const parts = hyphenated.map(part => {\n    const res = glyphString.slice(index, index + part.length);\n    index += part.length;\n    return res;\n  });\n\n  return parts;\n};\n\nconst hyphenate = words => words.map(word => hyphenateWord(word));\n\nconst formatter = (measureText, textAlign, callback, penalty) => {\n  const spaceWidth = measureText(' ');\n  const hyphenWidth = measureText('-');\n  const hyphenPenalty =\n    penalty || (!textAlign || textAlign === 'justify' ? 100 : 600);\n\n  const opts = {\n    width: 3,\n    stretch: 6,\n    shrink: 9,\n  };\n\n  return glyphString => {\n    const nodes = [];\n    const words = getWords(glyphString);\n    const spaceStretch = (spaceWidth * opts.width) / opts.stretch;\n    const spaceShrink = (spaceWidth * opts.width) / opts.shrink;\n    const hyphenationCallback = callback || hyphenate;\n    const hyphenatedWords = hyphenationCallback(words, glyphString);\n\n    hyphenatedWords.forEach((word, index, array) => {\n      if (word.length > 1) {\n        word.forEach((part, partIndex, partArray) => {\n          const isLastPart = partIndex === word.length - 1;\n\n          nodes.push(linebreak.box(measureText(part), part, !isLastPart));\n\n          if (partIndex !== partArray.length - 1) {\n            nodes.push(linebreak.penalty(hyphenWidth, hyphenPenalty, 1));\n          }\n        });\n      } else {\n        nodes.push(linebreak.box(measureText(word[0]), word[0]));\n      }\n      if (index === array.length - 1) {\n        nodes.push(linebreak.glue(0, linebreak.infinity, 0));\n        nodes.push(linebreak.penalty(0, -linebreak.infinity, 1));\n      } else {\n        nodes.push(linebreak.glue(spaceWidth, spaceStretch, spaceShrink));\n      }\n    });\n\n    return nodes;\n  };\n};\n\nexport default formatter;\n","import createLinebreaker from '@textkit/linebreaker';\nimport formatter from './formatter';\nimport linebreak from './linebreak';\n\nconst HYPHEN = 0x002d;\nconst TOLERANCE_STEPS = 5;\nconst TOLERANCE_LIMIT = 40;\n\nexport default ({ callback, penalty } = {}) => Textkit => {\n  const TextkitLinebreaker = createLinebreaker()(Textkit);\n  const fallbackLinebreaker = new TextkitLinebreaker();\n\n  return class KPLineBreaker {\n    constructor(tolerance) {\n      this.tolerance = tolerance || 4;\n    }\n\n    suggestLineBreak(glyphString, availableWidth, paragraphStyle) {\n      let tolerance = this.tolerance;\n      const width = this.measureWidth(glyphString);\n      const nodes = formatter(width, paragraphStyle.align, callback, penalty)(\n        glyphString,\n      );\n      let breaks = [];\n\n      // Try again with a higher tolerance if the line breaking failed.\n      while (breaks.length === 0 && tolerance < TOLERANCE_LIMIT) {\n        breaks = linebreak(nodes, [availableWidth], { tolerance });\n        tolerance += TOLERANCE_STEPS;\n      }\n\n      // Fallback to textkit default's linebreaking algorithm if K&P fails\n      if (breaks.length === 0) {\n        const fallback = fallbackLinebreaker.suggestLineBreak(\n          glyphString,\n          availableWidth,\n          paragraphStyle,\n        );\n        if (fallback) return fallback;\n\n        // If fallback didn't worked, we split workd based on width\n        const index = glyphString.glyphIndexAtOffset(availableWidth) - 1;\n        glyphString.insertGlyph(index, HYPHEN);\n        return { position: index + 1 };\n      }\n\n      if (!breaks[1]) {\n        return { position: glyphString.end };\n      }\n\n      const breakNode = this.findBreakNode(nodes, breaks[1].position);\n      const breakIndex = breakNode.value.end - glyphString.start;\n\n      if (breakNode.hyphenated) {\n        glyphString.insertGlyph(breakIndex, HYPHEN);\n        return { position: breakIndex + 1 };\n      }\n\n      // We kep the blank space at the end of the line to avoid justification issues\n      const offset = glyphString.isWhiteSpace(breakIndex) ? 1 : 0;\n      return { position: breakIndex + offset };\n    }\n\n    measureWidth(glyphString) {\n      const { font, fontSize } = glyphString.glyphRuns[0].attributes;\n\n      return word => {\n        if (typeof word === 'string') {\n          const scale = fontSize / font.unitsPerEm;\n          return font.layout(word).positions[0].xAdvance * scale;\n        }\n\n        return word.advanceWidth;\n      };\n    }\n\n    findBreakNode(nodes, position) {\n      let index = position - 1;\n\n      while (!nodes[index].value) {\n        index -= 1;\n      }\n\n      return nodes[index];\n    }\n  };\n};\n","import { LayoutEngine as BaseLayoutEngine } from '@react-pdf/textkit-core';\nimport scriptItemizer from '@react-pdf/script-itemizer';\nimport justificationEngine from '@textkit/justification-engine';\nimport textDecorationEngine from '@textkit/text-decoration-engine';\nimport lineFragmentGenerator from '@textkit/line-fragment-generator';\nimport fontSubstitutionEngine from './fontSubstitution';\nimport lineBreaker from './linebreaker';\n\n// justificationEngine values\nconst shrinkWhitespaceFactor = { before: -0.5, after: -0.5 };\n\nexport class LayoutEngine extends BaseLayoutEngine {\n  constructor({ hyphenationCallback, hyphenationPenalty }) {\n    const engines = {\n      scriptItemizer: scriptItemizer(),\n      decorationEngine: textDecorationEngine(),\n      lineFragmentGenerator: lineFragmentGenerator(),\n      fontSubstitutionEngine: fontSubstitutionEngine(),\n      justificationEngine: justificationEngine({ shrinkWhitespaceFactor }),\n      lineBreaker: lineBreaker({\n        callback: hyphenationCallback,\n        penalty: hyphenationPenalty,\n      }),\n    };\n\n    super(engines);\n  }\n}\n\nexport {\n  Run,\n  BBox,\n  Path,\n  Rect,\n  Point,\n  Block,\n  Range,\n  TabStop,\n  Polygon,\n  RunStyle,\n  GlyphRun,\n  Container,\n  Attachment,\n  GlyphString,\n  LineFragment,\n  ParagraphStyle,\n  DecorationLine,\n  FontDescriptor,\n  AttributedString,\n} from '@react-pdf/textkit-core';\n","// Extracted from https://github.com/devongovett/pdfkit/blob/master/lib/image/jpeg.coffee\n\nconst MARKERS = [\n  0xffc0,\n  0xffc1,\n  0xffc2,\n  0xffc3,\n  0xffc5,\n  0xffc6,\n  0xffc7,\n  0xffc8,\n  0xffc9,\n  0xffca,\n  0xffcb,\n  0xffcc,\n  0xffcd,\n  0xffce,\n  0xffcf,\n];\n\nclass JPEG {\n  data = null;\n  width = null;\n  height = null;\n\n  constructor(data) {\n    this.data = data;\n\n    if (data.readUInt16BE(0) !== 0xffd8) {\n      throw new Error('SOI not found in JPEG');\n    }\n\n    let marker;\n    let pos = 2;\n\n    while (pos < data.length) {\n      marker = data.readUInt16BE(pos);\n      pos += 2;\n      if (MARKERS.includes(marker)) {\n        break;\n      }\n      pos += data.readUInt16BE(pos);\n    }\n\n    if (!MARKERS.includes(marker)) {\n      throw new Error('Invalid JPEG.');\n    }\n\n    pos += 3;\n    this.height = data.readUInt16BE(pos);\n\n    pos += 2;\n    this.width = data.readUInt16BE(pos);\n  }\n}\n\nexport default JPEG;\n","const createCache = ({ limit = 100 } = {}) => {\n  const cache = {};\n  const keys = [];\n\n  return {\n    get: key => cache[key],\n    set: (key, value) => {\n      keys.push(key);\n      if (keys.length > limit) {\n        delete cache[keys.shift()];\n      }\n      cache[key] = value;\n    },\n    length: () => keys.length,\n  };\n};\n\nexport default createCache;\n","import fetch from 'isomorphic-fetch';\nimport PNG from '@react-pdf/png-js';\nimport JPEG from './jpeg';\nimport createCache from './cache';\n\nconst imagesCache = createCache({ limit: 30 });\n\nconst isValidFormat = format => {\n  const lower = format.toLowerCase();\n  return lower === 'jpg' || lower === 'jpeg' || lower === 'png';\n};\n\nconst isCompatibleBase64 = src =>\n  /data:image\\/[a-zA-Z]*;base64,[^\"]*/g.test(src);\n\nfunction getImage(body, extension) {\n  switch (extension.toLowerCase()) {\n    case 'jpg':\n    case 'jpeg':\n      return new JPEG(body);\n    case 'png':\n      return new PNG(body);\n    default:\n      return null;\n  }\n}\n\nconst resolveBase64Image = src => {\n  const match = /data:image\\/([a-zA-Z]*);base64,([^\"]*)/g.exec(src);\n  const format = match[1];\n  const data = match[2];\n\n  if (!isValidFormat(format)) {\n    throw new Error(`Base64 image invalid format: ${format}`);\n  }\n\n  return new Promise(resolve => {\n    return resolve(getImage(Buffer.from(data, 'base64'), format));\n  });\n};\n\nconst resolveLocalImage = src => {\n  if (src.data && src.format) {\n    return new Promise(resolve => resolve(getImage(src.data, src.format)));\n  }\n\n  throw new Error(`Invalid data given for local file: ${JSON.stringify(src)}`);\n};\n\nconst resolveRemoteImage = src => {\n  return fetch(src)\n    .then(response => {\n      if (response.buffer) {\n        return response.buffer();\n      }\n      return response.arrayBuffer();\n    })\n    .then(buffer => {\n      if (buffer.constructor.name === 'Buffer') {\n        return buffer;\n      }\n      return Buffer.from(buffer);\n    })\n    .then(body => {\n      const isPng =\n        body[0] === 137 &&\n        body[1] === 80 &&\n        body[2] === 78 &&\n        body[3] === 71 &&\n        body[4] === 13 &&\n        body[5] === 10 &&\n        body[6] === 26 &&\n        body[7] === 10;\n\n      const isJpg = body[0] === 255 && body[1] === 216 && body[2] === 255;\n\n      let extension = '';\n      if (isPng) {\n        extension = 'png';\n      } else if (isJpg) {\n        extension = 'jpg';\n      } else {\n        throw new Error('Not valid image extension');\n      }\n\n      return getImage(body, extension);\n    });\n};\n\nexport const resolveImage = (src, cache = true) => {\n  if (cache && imagesCache.get(src)) return imagesCache.get(src);\n\n  let image;\n  if (isCompatibleBase64(src)) {\n    image = resolveBase64Image(src);\n  } else if (typeof src === 'object') {\n    image = resolveLocalImage(src);\n  } else {\n    image = resolveRemoteImage(src);\n  }\n\n  if (cache) {\n    imagesCache.set(src, image);\n  }\n\n  return image;\n};\n","/* eslint-disable no-cond-assign */\nimport emojiRegex from 'emoji-regex';\nimport Font from '../font';\nimport { Attachment } from '../layout';\nimport { resolveImage } from '../utils/image';\n\n// Caches emoji images data\nconst emojis = {};\nconst regex = emojiRegex();\n\nconst reflect = promise => (...args) => promise(...args).then(v => v, e => e);\n\nconst fetchEmojiImage = reflect(resolveImage);\n\nconst getCodePoints = string =>\n  Array.from(string)\n    .map(char => char.codePointAt(0).toString(16))\n    .join('-');\n\nconst buildEmojiUrl = emoji => {\n  const { url, format } = Font.getEmojiSource();\n  return `${url}${getCodePoints(emoji)}.${format}`;\n};\n\nexport const fetchEmojis = string => {\n  const emojiSource = Font.getEmojiSource();\n\n  if (!emojiSource || !emojiSource.url) return [];\n\n  const promises = [];\n\n  let match;\n  while ((match = regex.exec(string))) {\n    const emoji = match[0];\n\n    if (!emojis[emoji] || emojis[emoji].loading) {\n      const emojiUrl = buildEmojiUrl(emoji);\n\n      emojis[emoji] = { loading: true };\n\n      promises.push(\n        fetchEmojiImage(emojiUrl).then(image => {\n          emojis[emoji].loading = false;\n          emojis[emoji].data = image.data;\n        }),\n      );\n    }\n  }\n\n  return promises;\n};\n\nexport const embedEmojis = fragments => {\n  const result = [];\n\n  for (let i = 0; i < fragments.length; i++) {\n    const fragment = fragments[i];\n\n    let match;\n    let lastIndex = 0;\n\n    while ((match = regex.exec(fragment.string))) {\n      const index = match.index;\n      const emoji = match[0];\n      const emojiSize = fragment.attributes.fontSize;\n      const chunk = fragment.string.slice(lastIndex, index + match[0].length);\n\n      // If emoji image was found, we create a new fragment with the\n      // correct attachment and object substitution character;\n      if (emojis[emoji] && emojis[emoji].data) {\n        result.push({\n          string: chunk.replace(match, Attachment.CHARACTER),\n          attributes: {\n            ...fragment.attributes,\n            attachment: new Attachment(emojiSize, emojiSize, {\n              yOffset: Math.floor(emojiSize * 0.1),\n              image: emojis[emoji].data,\n            }),\n          },\n        });\n      } else {\n        // If no emoji data, we just replace the emoji with a nodef char\n        result.push({\n          string: chunk.replace(match, String.fromCharCode(0)),\n          attributes: fragment.attributes,\n        });\n      }\n\n      lastIndex = index + emoji.length;\n    }\n\n    if (lastIndex < fragment.string.length) {\n      result.push({\n        string: fragment.string.slice(lastIndex),\n        attributes: fragment.attributes,\n      });\n    }\n  }\n\n  return result;\n};\n","import wrapPages from 'page-wrapping';\nimport Font from '../font';\nimport { fetchEmojis } from '../utils/emoji';\n\nclass Document {\n  static defaultProps = {\n    author: null,\n    keywords: null,\n    subject: null,\n    title: null,\n  };\n\n  constructor(root, props) {\n    this.root = root;\n    this.props = props;\n    this.children = [];\n  }\n\n  get name() {\n    return 'Document';\n  }\n\n  appendChild(child) {\n    child.parent = this;\n    this.children.push(child);\n  }\n\n  removeChild(child) {\n    const i = this.children.indexOf(child);\n    child.parent = null;\n    this.children.slice(i, 1);\n  }\n\n  addMetaData() {\n    const { title, author, subject, keywords, creator, producer } = this.props;\n\n    // The object keys need to start with a capital letter by the PDF spec\n    if (title) this.root.instance.info.Title = title;\n    if (author) this.root.instance.info.Author = author;\n    if (subject) this.root.instance.info.Subject = subject;\n    if (keywords) this.root.instance.info.Keywords = keywords;\n\n    this.root.instance.info.Creator = creator || 'react-pdf';\n    this.root.instance.info.Producer = producer || 'react-pdf';\n  }\n\n  async loadFonts() {\n    const promises = [];\n    const listToExplore = this.children.slice(0);\n\n    while (listToExplore.length > 0) {\n      const node = listToExplore.shift();\n\n      if (node.style && node.style.fontFamily) {\n        promises.push(Font.load(node.style.fontFamily, this.root.instance));\n      }\n\n      if (node.children) {\n        node.children.forEach(childNode => {\n          listToExplore.push(childNode);\n        });\n      }\n    }\n\n    await Promise.all(promises);\n  }\n\n  async loadEmojis() {\n    const promises = [];\n    const listToExplore = this.children.slice(0);\n\n    while (listToExplore.length > 0) {\n      const node = listToExplore.shift();\n\n      if (typeof node === 'string') {\n        promises.push(...fetchEmojis(node));\n      } else if (typeof node.value === 'string') {\n        promises.push(...fetchEmojis(node.value));\n      } else if (node.children) {\n        node.children.forEach(childNode => {\n          listToExplore.push(childNode);\n        });\n      }\n    }\n\n    await Promise.all(promises);\n  }\n\n  async loadImages() {\n    const promises = [];\n    const listToExplore = this.children.slice(0);\n\n    while (listToExplore.length > 0) {\n      const node = listToExplore.shift();\n\n      if (node.name === 'Image') {\n        promises.push(node.fetch());\n      }\n\n      if (node.children) {\n        node.children.forEach(childNode => {\n          listToExplore.push(childNode);\n        });\n      }\n    }\n\n    await Promise.all(promises);\n  }\n\n  async loadAssets() {\n    await Promise.all([this.loadFonts(), this.loadImages()]);\n  }\n\n  applyProps() {\n    this.children.forEach(child => child.applyProps());\n  }\n\n  update(newProps) {\n    this.props = newProps;\n  }\n\n  async wrapPages() {\n    let pageCount = 1;\n    const pages = [];\n\n    for (const page of this.children) {\n      const wrapArea = page.size.height - (page.style.paddingBottom || 0);\n      if (page.wrap) {\n        const subpages = await wrapPages(page, wrapArea, pageCount);\n\n        pageCount += subpages.length;\n\n        pages.push(...subpages);\n      } else {\n        page.height = page.size.height;\n        pages.push(page);\n      }\n    }\n\n    return pages;\n  }\n\n  async renderPages() {\n    const subpages = await this.wrapPages();\n\n    for (let j = 0; j < subpages.length; j++) {\n      // Update dynamic text nodes with total pages info\n      subpages[j].renderDynamicNodes(\n        {\n          pageNumber: j + 1,\n          totalPages: subpages.length,\n        },\n        node => node.name === 'Text',\n      );\n      await subpages[j].render();\n    }\n\n    return subpages;\n  }\n\n  async render() {\n    try {\n      this.addMetaData();\n      this.applyProps();\n      await this.loadEmojis();\n      await this.loadAssets();\n      await this.renderPages();\n      this.root.instance.end();\n      Font.reset();\n    } catch (e) {\n      throw e;\n    }\n  }\n}\n\nexport default Document;\n","import Yoga from 'yoga-layout-prebuilt';\nimport upperFirst from 'lodash.upperfirst';\n\nconst PERCENT = /^(\\d+)?%$/g;\n\nclass Node {\n  constructor() {\n    this.parent = null;\n    this.children = [];\n    this.computed = false;\n    this.layout = Yoga.Node.createDefault();\n  }\n\n  appendChild(child) {\n    if (child) {\n      child.parent = this;\n      this.children.push(child);\n      this.layout.insertChild(child.layout, this.layout.getChildCount());\n    }\n  }\n\n  removeChild(child) {\n    const index = this.children.indexOf(child);\n\n    if (index !== -1) {\n      child.parent = null;\n      this.children.splice(index, 1);\n      this.layout.removeChild(child.layout);\n    }\n  }\n\n  removeAllChilds() {\n    const children = [...this.children];\n    for (let i = 0; i < children.length; i++) {\n      children[i].remove();\n    }\n  }\n\n  remove() {\n    this.parent.removeChild(this);\n  }\n\n  setDimension(attr, value) {\n    const fixedMethod = `set${upperFirst(attr)}`;\n    const percentMethod = `${fixedMethod}Percent`;\n    const isPercent = PERCENT.exec(value);\n\n    if (isPercent) {\n      this.layout[percentMethod](parseInt(isPercent[1], 10));\n    } else {\n      this.layout[fixedMethod](value);\n    }\n  }\n\n  setPosition(edge, value) {\n    const isPercent = PERCENT.exec(value);\n\n    if (isPercent) {\n      this.layout.setPositionPercent(edge, parseInt(isPercent[1], 10));\n    } else {\n      this.layout.setPosition(edge, value);\n    }\n  }\n\n  setPadding(edge, value) {\n    const isPercent = PERCENT.exec(value);\n\n    if (isPercent) {\n      this.layout.setPaddingPercent(edge, parseInt(isPercent[1], 10));\n    } else {\n      this.layout.setPadding(edge, value);\n    }\n  }\n\n  setMargin(edge, value) {\n    const isPercent = PERCENT.exec(value);\n\n    if (isPercent) {\n      this.layout.setMarginPercent(edge, parseInt(isPercent[1], 10));\n    } else {\n      this.layout.setMargin(edge, value);\n    }\n  }\n\n  setBorder(edge, value) {\n    if (PERCENT.exec(value)) {\n      throw new Error('Node: You cannot set percentage border widths');\n    }\n    this.layout.setBorder(edge, value);\n  }\n\n  getAbsoluteLayout() {\n    const parent = this.parent;\n    const parentLayout =\n      parent && parent.getAbsoluteLayout\n        ? parent.getAbsoluteLayout()\n        : { left: 0, top: 0 };\n\n    return {\n      left: this.left + parentLayout.left,\n      top: this.top + parentLayout.top,\n      height: this.height,\n      width: this.width,\n    };\n  }\n\n  copyStyle(node) {\n    this.layout.copyStyle(node.layout);\n  }\n\n  calculateLayout() {\n    this.layout.calculateLayout();\n    this.computed = true;\n  }\n\n  isEmpty() {\n    return this.children.length === 0;\n  }\n\n  markDirty() {\n    return this.layout.markDirty();\n  }\n\n  onAppendDynamically() {}\n\n  get position() {\n    return this.layout.getPositionType() === Yoga.POSITION_TYPE_ABSOLUTE\n      ? 'absolute'\n      : 'relative';\n  }\n\n  get top() {\n    return this.layout.getComputedTop() || 0;\n  }\n\n  get left() {\n    return this.layout.getComputedLeft() || 0;\n  }\n\n  get right() {\n    return this.layout.getComputedRight() || 0;\n  }\n\n  get bottom() {\n    return this.layout.getComputedBottom() || 0;\n  }\n\n  get width() {\n    return this.layout.getComputedWidth();\n  }\n\n  get minWidth() {\n    return this.layout.getMinWidth().value;\n  }\n\n  get maxWidth() {\n    return this.layout.getMaxWidth().value;\n  }\n\n  get height() {\n    return this.layout.getComputedHeight();\n  }\n\n  get minHeight() {\n    return this.layout.getMinHeight().value;\n  }\n\n  get maxHeight() {\n    return this.layout.getMaxHeight().value;\n  }\n\n  get paddingTop() {\n    return this.layout.getComputedPadding(Yoga.EDGE_TOP) || 0;\n  }\n\n  get paddingRight() {\n    return this.layout.getComputedPadding(Yoga.EDGE_RIGHT) || 0;\n  }\n\n  get paddingBottom() {\n    return this.layout.getComputedPadding(Yoga.EDGE_BOTTOM) || 0;\n  }\n\n  get paddingLeft() {\n    return this.layout.getComputedPadding(Yoga.EDGE_LEFT) || 0;\n  }\n\n  get marginTop() {\n    return this.layout.getComputedMargin(Yoga.EDGE_TOP) || 0;\n  }\n\n  get marginRight() {\n    return this.layout.getComputedMargin(Yoga.EDGE_RIGHT) || 0;\n  }\n\n  get marginBottom() {\n    return this.layout.getComputedMargin(Yoga.EDGE_BOTTOM) || 0;\n  }\n\n  get marginLeft() {\n    return this.layout.getComputedMargin(Yoga.EDGE_LEFT) || 0;\n  }\n\n  get borderTopWidth() {\n    return this.layout.getComputedBorder(Yoga.EDGE_TOP) || 0;\n  }\n\n  get borderRightWidth() {\n    return this.layout.getComputedBorder(Yoga.EDGE_RIGHT) || 0;\n  }\n\n  get borderBottomWidth() {\n    return this.layout.getComputedBorder(Yoga.EDGE_BOTTOM) || 0;\n  }\n\n  get borderLeftWidth() {\n    return this.layout.getComputedBorder(Yoga.EDGE_LEFT) || 0;\n  }\n\n  get padding() {\n    return {\n      top: this.paddingTop,\n      right: this.paddingRight,\n      bottom: this.paddingBottom,\n      left: this.paddingLeft,\n    };\n  }\n\n  get margin() {\n    return {\n      top: this.marginTop,\n      right: this.marginRight,\n      bottom: this.marginBottom,\n      left: this.marginLeft,\n    };\n  }\n\n  set position(value) {\n    this.layout.setPositionType(\n      value === 'absolute'\n        ? Yoga.POSITION_TYPE_ABSOLUTE\n        : Yoga.POSITION_TYPE_RELATIVE,\n    );\n  }\n\n  set top(value) {\n    this.setPosition(Yoga.EDGE_TOP, value);\n  }\n\n  set left(value) {\n    this.setPosition(Yoga.EDGE_LEFT, value);\n  }\n\n  set right(value) {\n    this.setPosition(Yoga.EDGE_RIGHT, value);\n  }\n\n  set bottom(value) {\n    this.setPosition(Yoga.EDGE_BOTTOM, value);\n  }\n\n  set width(value) {\n    this.setDimension('width', value);\n  }\n\n  set minWidth(value) {\n    this.setDimension('minWidth', value);\n  }\n\n  set maxWidth(value) {\n    this.setDimension('maxWidth', value);\n  }\n\n  set height(value) {\n    this.setDimension('height', value);\n  }\n\n  set minHeight(value) {\n    this.setDimension('minHeight', value);\n  }\n\n  set maxHeight(value) {\n    this.setDimension('maxHeight', value);\n  }\n\n  set paddingTop(value) {\n    this.setPadding(Yoga.EDGE_TOP, value);\n  }\n\n  set paddingRight(value) {\n    this.setPadding(Yoga.EDGE_RIGHT, value);\n  }\n\n  set paddingBottom(value) {\n    this.setPadding(Yoga.EDGE_BOTTOM, value);\n  }\n\n  set paddingLeft(value) {\n    this.setPadding(Yoga.EDGE_LEFT, value);\n  }\n\n  set marginTop(value) {\n    this.setMargin(Yoga.EDGE_TOP, value);\n  }\n\n  set marginRight(value) {\n    this.setMargin(Yoga.EDGE_RIGHT, value);\n  }\n\n  set marginBottom(value) {\n    this.setMargin(Yoga.EDGE_BOTTOM, value);\n  }\n\n  set marginLeft(value) {\n    this.setMargin(Yoga.EDGE_LEFT, value);\n  }\n\n  set padding(value) {\n    this.paddingTop = value;\n    this.paddingRight = value;\n    this.paddingBottom = value;\n    this.paddingLeft = value;\n  }\n\n  set margin(value) {\n    this.marginTop = value;\n    this.marginRight = value;\n    this.marginBottom = value;\n    this.marginLeft = value;\n  }\n\n  set borderTopWidth(value) {\n    this.setBorder(Yoga.EDGE_TOP, value);\n  }\n\n  set borderRightWidth(value) {\n    this.setBorder(Yoga.EDGE_RIGHT, value);\n  }\n\n  set borderBottomWidth(value) {\n    this.setBorder(Yoga.EDGE_BOTTOM, value);\n  }\n\n  set borderLeftWidth(value) {\n    this.setBorder(Yoga.EDGE_LEFT, value);\n  }\n}\n\nexport default Node;\n","import Yoga from 'yoga-layout-prebuilt';\n\nconst yogaValue = (prop, value) => {\n  const isAlignType = prop =>\n    prop === 'alignItems' || prop === 'alignContent' || prop === 'alignSelf';\n\n  switch (value) {\n    case 'auto':\n      if (prop === 'alignSelf') {\n        return Yoga.ALIGN_AUTO;\n      }\n      break;\n    case 'flex':\n      return Yoga.DISPLAY_FLEX;\n    case 'none':\n      return Yoga.DISPLAY_NONE;\n    case 'row':\n      return Yoga.FLEX_DIRECTION_ROW;\n    case 'row-reverse':\n      return Yoga.FLEX_DIRECTION_ROW_REVERSE;\n    case 'column':\n      return Yoga.FLEX_DIRECTION_COLUMN;\n    case 'column-reverse':\n      return Yoga.FLEX_DIRECTION_COLUMN_REVERSE;\n    case 'stretch':\n      return Yoga.ALIGN_STRETCH;\n    case 'baseline':\n      return Yoga.ALIGN_BASELINE;\n    case 'space-around':\n      if (prop === 'justifyContent') {\n        return Yoga.JUSTIFY_SPACE_AROUND;\n      } else if (isAlignType(prop)) {\n        return Yoga.ALIGN_SPACE_AROUND;\n      }\n      break;\n    case 'space-between':\n      if (prop === 'justifyContent') {\n        return Yoga.JUSTIFY_SPACE_BETWEEN;\n      } else if (isAlignType(prop)) {\n        return Yoga.ALIGN_SPACE_BETWEEN;\n      }\n      break;\n    case 'around':\n      return Yoga.JUSTIFY_SPACE_AROUND;\n    case 'between':\n      return Yoga.JUSTIFY_SPACE_BETWEEN;\n    case 'wrap':\n      return Yoga.WRAP_WRAP;\n    case 'wrap-reverse':\n      return Yoga.WRAP_WRAP_REVERSE;\n    case 'nowrap':\n      return Yoga.WRAP_NO_WRAP;\n    case 'flex-start':\n      if (prop === 'justifyContent') {\n        return Yoga.JUSTIFY_FLEX_START;\n      } else if (isAlignType(prop)) {\n        return Yoga.ALIGN_FLEX_START;\n      }\n      break;\n    case 'flex-end':\n      if (prop === 'justifyContent') {\n        return Yoga.JUSTIFY_FLEX_END;\n      } else if (isAlignType(prop)) {\n        return Yoga.ALIGN_FLEX_END;\n      }\n      break;\n    case 'center':\n      if (prop === 'justifyContent') {\n        return Yoga.JUSTIFY_CENTER;\n      } else if (isAlignType(prop)) {\n        return Yoga.ALIGN_CENTER;\n      }\n      break;\n    default:\n      return value;\n  }\n};\n\n// These are not supported yet\n\n// ALIGN_AUTO: 0,\n// DIMENSION_WIDTH: 0,\n// DIMENSION_HEIGHT: 1,\n// DIRECTION_INHERIT: 0,\n// DIRECTION_LTR: 1,\n// DIRECTION_RTL: 2,\n// EDGE_LEFT: 0,\n// EDGE_TOP: 1,\n// EDGE_RIGHT: 2,\n// EDGE_BOTTOM: 3,\n// EDGE_START: 4,\n// EDGE_END: 5,\n// EDGE_HORIZONTAL: 6,\n// EDGE_VERTICAL: 7,\n// EDGE_ALL: 8,\n// MEASURE_MODE_UNDEFINED: 0,\n// MEASURE_MODE_EXACTLY: 1,\n// MEASURE_MODE_AT_MOST: 2,\n// NODE_TYPE_DEFAULT: 0,\n// NODE_TYPE_TEXT: 1,\n// OVERFLOW_VISIBLE: 0,\n// OVERFLOW_HIDDEN: 1,\n// OVERFLOW_SCROLL: 2,\n// POSITION_TYPE_RELATIVE: 0,\n// POSITION_TYPE_ABSOLUTE: 1,\n// PRINT_OPTIONS_LAYOUT: 1,\n// PRINT_OPTIONS_STYLE: 2,\n// PRINT_OPTIONS_CHILDREN: 4,\n// UNIT_UNDEFINED: 0,\n// UNIT_POINT: 1,\n// UNIT_PERCENT: 2,\n// UNIT_AUTO: 3,\n\nexport default yogaValue;\n","const parseValue = value => {\n  const match = /^(\\d*\\.?\\d+)(in|mm|cm|pt)?$/g.exec(value);\n\n  if (match) {\n    return { value: parseFloat(match[1], 10), unit: match[2] || 'pt' };\n  } else {\n    return { value, unit: undefined };\n  }\n};\n\nconst parseScalar = value => {\n  let result = {};\n  const scalar = parseValue(value);\n\n  switch (scalar.unit) {\n    case 'in':\n      result = scalar.value * 72;\n      break;\n    case 'mm':\n      result = scalar.value * (1 / 25.4) * 72;\n      break;\n    case 'cm':\n      result = scalar.value * (1 / 2.54) * 72;\n      break;\n    default:\n      result = scalar.value;\n  }\n\n  return result;\n};\n\nexport default parseScalar;\n","import yogaValue from './yogaValue';\nimport parseScalar from './transformUnits';\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nconst styleShortHands = {\n  margin: {\n    marginTop: true,\n    marginRight: true,\n    marginBottom: true,\n    marginLeft: true,\n  },\n  marginHorizontal: {\n    marginLeft: true,\n    marginRight: true,\n  },\n  marginVertical: {\n    marginTop: true,\n    marginBottom: true,\n  },\n  padding: {\n    paddingTop: true,\n    paddingRight: true,\n    paddingBottom: true,\n    paddingLeft: true,\n  },\n  paddingHorizontal: {\n    paddingLeft: true,\n    paddingRight: true,\n  },\n  paddingVertical: {\n    paddingTop: true,\n    paddingBottom: true,\n  },\n  border: {\n    borderTopColor: true,\n    borderTopStyle: true,\n    borderTopWidth: true,\n    borderRightColor: true,\n    borderRightStyle: true,\n    borderRightWidth: true,\n    borderBottomColor: true,\n    borderBottomStyle: true,\n    borderBottomWidth: true,\n    borderLeftColor: true,\n    borderLeftStyle: true,\n    borderLeftWidth: true,\n  },\n  borderTop: {\n    borderTopColor: true,\n    borderTopStyle: true,\n    borderTopWidth: true,\n  },\n  borderRight: {\n    borderRightColor: true,\n    borderRightStyle: true,\n    borderRightWidth: true,\n  },\n  borderBottom: {\n    borderBottomColor: true,\n    borderBottomStyle: true,\n    borderBottomWidth: true,\n  },\n  borderLeft: {\n    borderLeftColor: true,\n    borderLeftStyle: true,\n    borderLeftWidth: true,\n  },\n  borderColor: {\n    borderTopColor: true,\n    borderRightColor: true,\n    borderBottomColor: true,\n    borderLeftColor: true,\n  },\n  borderRadius: {\n    borderTopLeftRadius: true,\n    borderTopRightRadius: true,\n    borderBottomRightRadius: true,\n    borderBottomLeftRadius: true,\n  },\n  borderStyle: {\n    borderTopStyle: true,\n    borderRightStyle: true,\n    borderBottomStyle: true,\n    borderLeftStyle: true,\n  },\n  borderWidth: {\n    borderTopWidth: true,\n    borderRightWidth: true,\n    borderBottomWidth: true,\n    borderLeftWidth: true,\n  },\n};\n\n// Expand the shorthand properties to isolate every declaration from the others.\nconst expandStyles = style => {\n  if (!style) return style;\n\n  const propsArray = Object.keys(style);\n  const resolvedStyle = {};\n\n  for (let i = 0; i < propsArray.length; i++) {\n    const key = propsArray[i];\n    const value = style[key];\n\n    switch (key) {\n      case 'display':\n      case 'flex':\n      case 'flexDirection':\n      case 'flexWrap':\n      case 'flexFlow':\n      case 'flexGrow':\n      case 'flexShrink':\n      case 'flexBasis':\n      case 'justifyContent':\n      case 'alignSelf':\n      case 'alignItems':\n      case 'alignContent':\n      case 'order':\n        resolvedStyle[key] = yogaValue(key, value);\n        break;\n      case 'textAlignVertical':\n        resolvedStyle.verticalAlign = value === 'center' ? 'middle' : value;\n        break;\n      case 'margin':\n      case 'marginHorizontal':\n      case 'marginVertical':\n      case 'padding':\n      case 'paddingHorizontal':\n      case 'paddingVertical':\n      case 'border':\n      case 'borderTop':\n      case 'borderRight':\n      case 'borderBottom':\n      case 'borderLeft':\n      case 'borderColor':\n      case 'borderRadius':\n      case 'borderStyle':\n      case 'borderWidth':\n        {\n          const expandedProps = styleShortHands[key];\n          for (const propName in expandedProps) {\n            if (hasOwnProperty.call(expandedProps, propName)) {\n              resolvedStyle[propName] = value;\n            }\n          }\n        }\n        break;\n      default:\n        resolvedStyle[key] = value;\n        break;\n    }\n  }\n\n  return resolvedStyle;\n};\n\nconst matchBorderShorthand = value =>\n  value.match(/(\\d+(px|in|mm|cm|pt)?)\\s(\\S+)\\s(\\S+)/);\n\n// Transforms shorthand border values to correct value\nconst processBorders = (key, value) => {\n  const match = matchBorderShorthand(value);\n\n  if (match) {\n    if (key.match(/.Color/)) {\n      return match[4];\n    } else if (key.match(/.Style/)) {\n      return match[3];\n    } else if (key.match(/.Width/)) {\n      return match[1];\n    } else {\n      throw new Error(`StyleSheet: Invalid '${value}' for '${key}'`);\n    }\n  }\n\n  return value;\n};\n\nconst transformStyles = style => {\n  const expandedStyles = expandStyles(style);\n  const propsArray = Object.keys(expandedStyles);\n  const resolvedStyle = {};\n\n  for (let i = 0; i < propsArray.length; i++) {\n    const key = propsArray[i];\n    const value = expandedStyles[key];\n    const isBorderStyle = key.match(/border/) && typeof value === 'string';\n    const resolved = isBorderStyle ? processBorders(key, value) : value;\n\n    resolvedStyle[key] = parseScalar(resolved);\n  }\n\n  return resolvedStyle;\n};\n\nexport default transformStyles;\n","import matchMedia from 'media-engine';\nimport transformStyles from './transformStyles';\n\nconst create = styles => styles;\n\nconst flatten = input => {\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  const result = input.reduce((acc, style) => {\n    if (style) {\n      Object.keys(style).forEach(key => {\n        if (style[key] !== null && style[key] !== undefined) {\n          acc[key] = style[key];\n        }\n      });\n    }\n\n    return acc;\n  }, {});\n\n  return result;\n};\n\nconst resolveMediaQueries = (input, container) => {\n  const result = Object.keys(input).reduce((acc, key) => {\n    if (/@media/.test(key)) {\n      return {\n        ...acc,\n        ...matchMedia({ [key]: input[key] }, container),\n      };\n    }\n\n    return { ...acc, [key]: input[key] };\n  }, {});\n\n  return result;\n};\n\nconst resolve = (styles, container) => {\n  if (!styles) return null;\n\n  styles = flatten(styles);\n  styles = resolveMediaQueries(styles, container);\n  styles = transformStyles(styles);\n\n  return styles;\n};\n\nconst absoluteFillObject = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n};\n\nexport default {\n  hairlineWidth: 1,\n  create,\n  resolve,\n  flatten,\n  absoluteFillObject,\n};\n","const Debug = {\n  debug() {\n    const layout = this.getAbsoluteLayout();\n    const padding = this.padding;\n    const margin = this.margin;\n\n    this.root.instance.save();\n\n    this.debugContent(layout, margin, padding);\n    this.debugPadding(layout, margin, padding);\n    this.debugMargin(layout, margin);\n    this.debugText(layout, margin);\n\n    this.root.instance.restore();\n  },\n  debugText(layout, margin) {\n    const roundedWidth = Math.round(this.width + margin.left + margin.right);\n    const roundedHeight = Math.round(this.height + margin.top + margin.bottom);\n\n    this.root.instance\n      .fontSize(4)\n      .opacity(1)\n      .fillColor('black')\n      .text(\n        `${roundedWidth} x ${roundedHeight}`,\n        layout.left - margin.left,\n        Math.max(layout.top - margin.top - 4, 1),\n      );\n  },\n  debugContent(layout, margin, padding) {\n    this.root.instance\n      .fillColor('#a1c6e7')\n      .opacity(0.5)\n      .rect(\n        layout.left + padding.left,\n        layout.top + padding.top,\n        layout.width - padding.left - padding.right,\n        layout.height - padding.top - padding.bottom,\n      )\n      .fill();\n  },\n  debugPadding(layout, margin, padding) {\n    this.root.instance.fillColor('#c4deb9').opacity(0.5);\n\n    // Padding top\n    this.root.instance\n      .rect(\n        layout.left + padding.left,\n        layout.top,\n        layout.width - padding.right - padding.left,\n        padding.top,\n      )\n      .fill();\n\n    // Padding left\n    this.root.instance\n      .rect(layout.left, layout.top, padding.left, layout.height)\n      .fill();\n\n    // Padding right\n    this.root.instance\n      .rect(\n        layout.left + layout.width - padding.right,\n        layout.top,\n        padding.right,\n        layout.height,\n      )\n      .fill();\n\n    // Padding bottom\n    this.root.instance\n      .rect(\n        layout.left + padding.left,\n        layout.top + layout.height - padding.bottom,\n        layout.width - padding.right - padding.left,\n        padding.bottom,\n      )\n      .fill();\n  },\n  debugMargin(layout, margin) {\n    this.root.instance.fillColor('#f8cca1').opacity(0.5);\n\n    // Margin top\n    this.root.instance\n      .rect(layout.left, layout.top - margin.top, layout.width, margin.top)\n      .fill();\n\n    // Margin left\n    this.root.instance\n      .rect(\n        layout.left - margin.left,\n        layout.top - margin.top,\n        margin.left,\n        layout.height + margin.top + margin.bottom,\n      )\n      .fill();\n\n    // Margin right\n    this.root.instance\n      .rect(\n        layout.left + layout.width,\n        layout.top - margin.top,\n        margin.right,\n        layout.height + margin.top + margin.bottom,\n      )\n      .fill();\n\n    // Margin bottom\n    this.root.instance\n      .rect(\n        layout.left,\n        layout.top + layout.height,\n        layout.width,\n        margin.bottom,\n      )\n      .fill();\n  },\n};\n\nexport default Debug;\n","const Borders = {\n  drawBorders() {\n    const { left, top, width, height } = this.getAbsoluteLayout();\n\n    const {\n      borderTopWidth = 0,\n      borderRightWidth = 0,\n      borderBottomWidth = 0,\n      borderLeftWidth = 0,\n    } = this;\n\n    const {\n      borderTopLeftRadius = 0,\n      borderTopRightRadius = 0,\n      borderBottomRightRadius = 0,\n      borderBottomLeftRadius = 0,\n      borderTopColor = 'black',\n      borderRightColor = 'black',\n      borderBottomColor = 'black',\n      borderLeftColor = 'black',\n      borderTopStyle = 'solid',\n      borderRightStyle = 'solid',\n      borderBottomStyle = 'solid',\n      borderLeftStyle = 'solid',\n    } = this.getComputedStyles();\n\n    // Save current graphics stack\n    this.root.instance.save();\n\n    // border top\n    this.drawHorizontalBorder(\n      [\n        left + (borderTopLeftRadius > 0 ? borderTopWidth / 2 : 0),\n        top + borderTopWidth / 2,\n      ],\n      [\n        left + width - (borderTopRightRadius > 0 ? borderTopWidth / 2 : 0),\n        top + borderTopWidth / 2,\n      ],\n      borderTopLeftRadius,\n      borderTopRightRadius,\n      borderTopWidth,\n      borderTopColor,\n      borderTopStyle,\n    );\n\n    // border right\n    this.drawVerticalBorder(\n      [\n        left + width - borderRightWidth / 2,\n        top + (borderTopRightRadius > 0 ? borderRightWidth / 2 : 0),\n      ],\n      [\n        left + width - borderRightWidth / 2,\n        top + height - (borderBottomRightRadius > 0 ? borderRightWidth / 2 : 0),\n      ],\n      -borderTopRightRadius,\n      -borderBottomRightRadius,\n      borderRightWidth,\n      borderRightColor,\n      borderRightStyle,\n    );\n\n    // border bottom\n    this.drawHorizontalBorder(\n      [\n        left +\n          width -\n          (borderBottomRightRadius > 0 ? borderBottomWidth / 2 : 0),\n        top + height - borderBottomWidth / 2,\n      ],\n      [\n        left + (borderBottomLeftRadius > 0 ? borderBottomWidth / 2 : 0),\n        top + height - borderBottomWidth / 2,\n      ],\n      -borderBottomRightRadius,\n      -borderBottomLeftRadius,\n      borderBottomWidth,\n      borderBottomColor,\n      borderBottomStyle,\n    );\n\n    // border left\n    this.drawVerticalBorder(\n      [\n        left + borderLeftWidth / 2,\n        top + height - (borderBottomLeftRadius > 0 ? borderLeftWidth / 2 : 0),\n      ],\n      [\n        left + borderLeftWidth / 2,\n        top + (borderTopLeftRadius > 0 ? borderLeftWidth / 2 : 0),\n      ],\n      borderBottomLeftRadius,\n      borderTopLeftRadius,\n      borderLeftWidth,\n      borderLeftColor,\n      borderLeftStyle,\n    );\n\n    // Restore graphics stack to avoid side effects\n    this.root.instance.restore();\n  },\n  traceBorder(style, width) {\n    switch (style) {\n      case 'dashed':\n        this.root.instance.dash(width * 2, { space: width * 1.2 }).stroke();\n        break;\n      case 'dotted':\n        this.root.instance.dash(width, { space: width * 1.2 }).stroke();\n        break;\n      default:\n        this.root.instance.stroke();\n    }\n  },\n  drawHorizontalBorder(p1, p2, r1, r2, width, color, style) {\n    if (width <= 0) return;\n\n    this.root.instance\n      .lineWidth(width)\n      .moveTo(p1[0], p1[1] + r1)\n      .quadraticCurveTo(p1[0], p1[1], p1[0] + r1, p1[1])\n      .lineTo(p2[0] - r2, p2[1])\n      .quadraticCurveTo(p2[0], p2[1], p2[0], p2[1] + r2)\n      .strokeColor(color);\n\n    this.traceBorder(style, width);\n  },\n  drawVerticalBorder(p1, p2, r1, r2, width, color, style) {\n    if (width <= 0) return;\n\n    this.root.instance\n      .lineWidth(width)\n      .moveTo(p1[0] + r1, p1[1])\n      .quadraticCurveTo(p1[0], p1[1], p1[0], p1[1] - r1)\n      .lineTo(p2[0], p2[1] + r2)\n      .quadraticCurveTo(p2[0], p2[1], p2[0] + r2, p2[1])\n      .strokeColor(color);\n\n    this.traceBorder(style, width);\n  },\n};\n\nexport default Borders;\n","const getRotation = transform => {\n  const match = /rotate\\((-?\\d+.?\\d+)(.+)\\)/g.exec(transform);\n\n  if (match && match[1] && match[2]) {\n    const value = match[1];\n    return match[2] === 'rad' ? (value * 180) / Math.PI : value;\n  }\n\n  return 0;\n};\n\nconst getTranslateX = transform => {\n  const matchX = /translateX\\((-?\\d+\\.?d*)\\)/g.exec(transform);\n  const matchGeneric = /translate\\((-?\\d+\\.?d*).*,\\s*(-?\\d+\\.?d*).*\\)/g.exec(\n    transform,\n  );\n\n  if (matchX && matchX[1]) return matchX[1];\n  if (matchGeneric && matchGeneric[1]) return matchGeneric[1];\n\n  return 0;\n};\n\nconst getTranslateY = transform => {\n  const matchY = /translateY\\((-?\\d+\\.?\\d*)\\)/g.exec(transform);\n  const matchGeneric = /translate\\((-?\\d+\\.?\\d*).*,\\s*(-?\\d+\\.?\\d*).*\\)/g.exec(\n    transform,\n  );\n\n  if (matchY && matchY[1]) return matchY[1];\n  if (matchGeneric && matchGeneric[2]) return matchGeneric[2];\n\n  return 0;\n};\n\nconst getScaleX = transform => {\n  const matchX = /scaleX\\((-?\\d+\\.?\\d*)\\)/g.exec(transform);\n  const matchGeneric = /scale\\((-?\\d+\\.?\\d*).*,\\s*(-?\\d+\\.?\\d*).*\\)/g.exec(\n    transform,\n  );\n\n  if (matchX && matchX[1]) return matchX[1];\n  if (matchGeneric && matchGeneric[1]) return matchGeneric[1];\n\n  return 1;\n};\n\nconst getScaleY = transform => {\n  const matchY = /scaleY\\((-?\\d+\\.?\\d*)\\)/g.exec(transform);\n  const matchGeneric = /scale\\((-?\\d+\\.?\\d*).*,\\s*(-?\\d+\\.?\\d*).*\\)/g.exec(\n    transform,\n  );\n\n  if (matchY && matchY[1]) return matchY[1];\n  if (matchGeneric && matchGeneric[2]) return matchGeneric[2];\n\n  return 1;\n};\n\nconst getMatrix = transform => {\n  const match = /matrix\\(([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+)\\)/g.exec(\n    transform,\n  );\n  if (match) return match.slice(1, 7);\n  return null;\n};\n\nconst applySingleTransformation = (element, transform) => {\n  const { left, top, width, height } = element.getAbsoluteLayout();\n  const origin = [left + width / 2, top + height / 2];\n\n  if (/rotate/g.test(transform)) {\n    element.root.instance.rotate(getRotation(transform), { origin });\n  } else if (/scaleX/g.test(transform)) {\n    element.root.instance.scale(getScaleX(transform), 1, { origin });\n  } else if (/scaleY/g.test(transform)) {\n    element.root.instance.scale(1, getScaleY(transform), { origin });\n  } else if (/scale/g.test(transform)) {\n    element.root.instance.scale(getScaleX(transform), getScaleY(transform), {\n      origin,\n    });\n  } else if (/translateX/g.test(transform)) {\n    element.root.instance.translate(getTranslateX(transform), 1, { origin });\n  } else if (/translateY/g.test(transform)) {\n    element.root.instance.translate(1, getTranslateY(transform), { origin });\n  } else if (/translate/g.test(transform)) {\n    element.root.instance.translate(\n      getTranslateX(transform),\n      getTranslateY(transform),\n      { origin },\n    );\n  } else if (/matrix/g.test(transform)) {\n    element.root.instance.transform(...getMatrix(transform));\n  }\n};\n\nconst Transformations = {\n  applyTransformations() {\n    let match;\n    const re = /[a-zA-Z]+\\([^)]+\\)/g;\n    const transform = (this.style && this.style.transform) || '';\n\n    while ((match = re.exec(transform)) != null) {\n      applySingleTransformation(this, match[0]);\n    }\n  },\n};\n\nexport default Transformations;\n","export const inheritedProperties = [\n  'color',\n  'fontFamily',\n  'fontSize',\n  'fontStyle',\n  'fontWeight',\n  'letterSpacing',\n  'textDecoration',\n  'lineHeight',\n  'textAlign',\n  'visibility',\n  'wordSpacing',\n];\n\nexport const flatStyles = stylesArray =>\n  stylesArray.reduce((acc, style) => ({ ...acc, ...style }), {});\n","import toPairsIn from 'lodash.topairsin';\nimport isFunction from 'lodash.isfunction';\nimport upperFirst from 'lodash.upperfirst';\nimport Node from './Node';\nimport pick from 'lodash.pick';\nimport merge from 'lodash.merge';\nimport warning from 'fbjs/lib/warning';\nimport StyleSheet from '../stylesheet';\nimport Debug from '../mixins/debug';\nimport Borders from '../mixins/borders';\nimport Transform from '../mixins/transform';\nimport { inheritedProperties } from '../utils/styles';\n\nclass Base extends Node {\n  constructor(root, props) {\n    super();\n\n    this.root = root;\n    this.props = merge(\n      {},\n      this.constructor.defaultProps,\n      Base.defaultProps,\n      props,\n    );\n\n    warning(!this.props.styles, '\"styles\" prop passed instead of \"style\" prop');\n  }\n\n  get page() {\n    return this.parent.page;\n  }\n\n  get wrap() {\n    return this.props.wrap;\n  }\n\n  get break() {\n    return this.props.break;\n  }\n\n  get fixed() {\n    return this.props.fixed;\n  }\n\n  get minPresenceAhead() {\n    return this.props.minPresenceAhead;\n  }\n\n  get absolute() {\n    return this.props.style.position === 'absolute';\n  }\n\n  set break(value) {\n    this.props.break = value;\n  }\n\n  applyProps() {\n    const { size, orientation } = this.page;\n\n    this.style = StyleSheet.resolve(this.props.style, {\n      width: size.width,\n      height: size.height,\n      orientation: orientation,\n    });\n\n    toPairsIn(this.style).map(([attribute, value]) => {\n      this.applyStyle(attribute, value);\n    });\n\n    this.children.forEach(child => {\n      if (child.applyProps) {\n        child.applyProps();\n      }\n    });\n  }\n\n  applyStyle(attribute, value) {\n    const setter = `set${upperFirst(attribute)}`;\n\n    switch (attribute) {\n      case 'marginTop':\n      case 'marginRight':\n      case 'marginBottom':\n      case 'marginLeft':\n      case 'paddingTop':\n      case 'paddingRight':\n      case 'paddingBottom':\n      case 'paddingLeft':\n      case 'borderTopWidth':\n      case 'borderRightWidth':\n      case 'borderBottomWidth':\n      case 'borderLeftWidth':\n      case 'position':\n      case 'top':\n      case 'right':\n      case 'bottom':\n      case 'left':\n      case 'width':\n      case 'height':\n      case 'minHeight':\n      case 'maxHeight':\n      case 'minWidth':\n      case 'maxWidth':\n        this[attribute] = value;\n        break;\n      default:\n        if (isFunction(this.layout[setter])) {\n          this.layout[setter](value);\n        }\n    }\n  }\n\n  getComputedStyles() {\n    let element = this.parent;\n    let inheritedStyles = {};\n\n    while (element && element.parent) {\n      inheritedStyles = {\n        ...element.parent.style,\n        ...element.style,\n        ...inheritedStyles,\n      };\n      element = element.parent;\n    }\n\n    return {\n      ...pick(inheritedStyles, inheritedProperties),\n      ...this.style,\n    };\n  }\n\n  drawBackgroundColor() {\n    const { left, top, width, height } = this.getAbsoluteLayout();\n    const styles = this.getComputedStyles();\n\n    // We can't set individual radius for each corner on PDF, so we get the higher\n    const borderRadius =\n      Math.max(\n        styles.borderTopLeftRadius,\n        styles.borderTopRightRadius,\n        styles.borderBottomRightRadius,\n        styles.borderBottomLeftRadius,\n      ) || 0;\n\n    if (styles.backgroundColor) {\n      this.root.instance\n        .fillColor(styles.backgroundColor)\n        .roundedRect(left, top, width, height, borderRadius)\n        .fill();\n    }\n  }\n\n  clone() {\n    const clone = new this.constructor(this.root, this.props);\n\n    clone.copyStyle(this);\n    clone.style = this.style;\n\n    return clone;\n  }\n\n  onNodeSplit(height, clone) {\n    this.calculateLayout();\n\n    clone.marginTop = 0;\n    clone.paddingTop = 0;\n\n    // If a height was given to the element, we need to substract the remaining wrapping height\n    // If not, we just let Yoga calculate the appropiate height when layout get's calculated.\n    if (clone.style.height) {\n      clone.height = this.height - height;\n    }\n\n    this.height = height;\n    this.marginBottom = 0;\n    this.paddingBottom = 0;\n  }\n\n  update(newProps) {\n    this.props = merge(\n      {},\n      this.constructor.defaultProps,\n      Base.defaultProps,\n      newProps,\n    );\n    this.root.markDirty();\n  }\n\n  async renderChildren() {\n    const absoluteChilds = this.children.filter(child => child.absolute);\n    const nonAbsoluteChilds = this.children.filter(child => !child.absolute);\n\n    for (let i = 0; i < nonAbsoluteChilds.length; i++) {\n      await nonAbsoluteChilds[i].render();\n    }\n\n    for (let i = 0; i < absoluteChilds.length; i++) {\n      await absoluteChilds[i].render();\n    }\n  }\n}\n\nBase.defaultProps = {\n  style: {\n    borderTopLeftRadius: 0,\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n  minPresenceAhead: 0,\n};\n\nObject.assign(Base.prototype, Debug);\nObject.assign(Base.prototype, Borders);\nObject.assign(Base.prototype, Transform);\n\nexport default Base;\n","class TextInstance {\n  constructor(root, value) {\n    this.root = root;\n    this.value = value;\n    this.parent = null;\n    this.props = {};\n  }\n\n  get name() {\n    return 'TextInstance';\n  }\n\n  remove() {\n    this.parent.removeChild(this);\n  }\n\n  clone() {\n    return new this.constructor(this.root, this.value);\n  }\n\n  update(value) {\n    this.value = value;\n    this.parent.computed = false;\n    this.parent._container = null;\n    this.root.markDirty();\n  }\n}\n\nexport default TextInstance;\n","const PAGE_SIZES = {\n  '4A0': [4767.87, 6740.79],\n  '2A0': [3370.39, 4767.87],\n  A0: [2383.94, 3370.39],\n  A1: [1683.78, 2383.94],\n  A2: [1190.55, 1683.78],\n  A3: [841.89, 1190.55],\n  A4: [595.28, 841.89],\n  A5: [419.53, 595.28],\n  A6: [297.64, 419.53],\n  A7: [209.76, 297.64],\n  A8: [147.4, 209.76],\n  A9: [104.88, 147.4],\n  A10: [73.7, 104.88],\n  B0: [2834.65, 4008.19],\n  B1: [2004.09, 2834.65],\n  B2: [1417.32, 2004.09],\n  B3: [1000.63, 1417.32],\n  B4: [708.66, 1000.63],\n  B5: [498.9, 708.66],\n  B6: [354.33, 498.9],\n  B7: [249.45, 354.33],\n  B8: [175.75, 249.45],\n  B9: [124.72, 175.75],\n  B10: [87.87, 124.72],\n  C0: [2599.37, 3676.54],\n  C1: [1836.85, 2599.37],\n  C2: [1298.27, 1836.85],\n  C3: [918.43, 1298.27],\n  C4: [649.13, 918.43],\n  C5: [459.21, 649.13],\n  C6: [323.15, 459.21],\n  C7: [229.61, 323.15],\n  C8: [161.57, 229.61],\n  C9: [113.39, 161.57],\n  C10: [79.37, 113.39],\n  RA0: [2437.8, 3458.27],\n  RA1: [1729.13, 2437.8],\n  RA2: [1218.9, 1729.13],\n  RA3: [864.57, 1218.9],\n  RA4: [609.45, 864.57],\n  SRA0: [2551.18, 3628.35],\n  SRA1: [1814.17, 2551.18],\n  SRA2: [1275.59, 1814.17],\n  SRA3: [907.09, 1275.59],\n  SRA4: [637.8, 907.09],\n  EXECUTIVE: [521.86, 756.0],\n  FOLIO: [612.0, 936.0],\n  LEGAL: [612.0, 1008.0],\n  LETTER: [612.0, 792.0],\n  TABLOID: [792.0, 1224.0],\n};\n\n// Return page size in an object { width, height } given the passed size and orientation\n// Accepts page type, arraoy or object as parameter\nconst getPageSize = (size, orientation = 'portrait') => {\n  let result;\n\n  if (typeof size === 'string') {\n    result = PAGE_SIZES[size.toUpperCase()];\n  } else if (Array.isArray(size)) {\n    result = size;\n  } else if (typeof size === 'object' && size.width && size.height) {\n    result = [size.width, size.height];\n  } else {\n    throw new Error(`Invalid Page size: ${size}`);\n  }\n\n  return orientation === 'portrait'\n    ? { width: result[0], height: result[1] }\n    : { width: result[1], height: result[0] };\n};\n\nexport default getPageSize;\n","const RULER_WIDTH = 13;\nconst RULER_COLOR = 'white';\nconst RULER_FONT_SIZE = 5;\nconst DEFAULT_RULER_STEPS = 50;\nconst LINE_WIDTH = 0.5;\nconst LINE_COLOR = 'gray';\nconst GRID_COLOR = '#ababab';\n\nconst range = (max, steps) =>\n  Array.from({ length: Math.ceil(max / steps) }, (_, i) => i * steps);\n\nconst matchPercentage = value => {\n  const match = value.match(/(\\d+\\.?\\d*)%/);\n  if (match) {\n    return 100 / parseFloat(match[1], 10);\n  }\n\n  return null;\n};\n\nconst Ruler = {\n  getRulerWidth() {\n    return RULER_WIDTH;\n  },\n  hasHorizontalRuler() {\n    return this.props.ruler || this.props.horizontalRuler;\n  },\n  hasVerticalRuler() {\n    return this.props.ruler || this.props.verticalRuler;\n  },\n  getHorizontalSteps() {\n    const value =\n      this.props.horizontalRulerSteps ||\n      this.props.rulerSteps ||\n      DEFAULT_RULER_STEPS;\n\n    if (typeof value === 'string') {\n      const percentage = matchPercentage(value);\n      if (percentage) {\n        const width = this.width - (this.hasVerticalRuler() ? RULER_WIDTH : 0);\n        return width / percentage;\n      }\n      throw new Error('Page: Invalid horizontal steps value');\n    }\n\n    return value;\n  },\n  getVerticalSteps() {\n    const value =\n      this.props.verticalRulerSteps ||\n      this.props.rulerSteps ||\n      DEFAULT_RULER_STEPS;\n\n    if (typeof value === 'string') {\n      const percentage = matchPercentage(value);\n      if (percentage) {\n        const height =\n          this.height - (this.hasHorizontalRuler() ? RULER_WIDTH : 0);\n        return height / percentage;\n      }\n      throw new Error('Page: Invalid horizontal steps value');\n    }\n\n    return value;\n  },\n  renderRuler() {\n    const hasHorizontalRuler = this.hasHorizontalRuler();\n    const hasVerticalRuler = this.hasVerticalRuler();\n\n    if (hasHorizontalRuler || hasVerticalRuler) {\n      this.root.instance\n        .save()\n        .lineWidth(LINE_WIDTH)\n        .fontSize(RULER_FONT_SIZE)\n        .opacity(1);\n\n      if (hasHorizontalRuler) this.drawHorizontalRuler();\n\n      if (hasVerticalRuler) this.drawVerticalRuler();\n\n      if (hasHorizontalRuler && hasVerticalRuler) {\n        this.root.instance\n          .rect(0, 0, RULER_WIDTH - LINE_WIDTH, RULER_WIDTH - LINE_WIDTH)\n          .fill(RULER_COLOR);\n      }\n\n      this.root.instance.restore();\n    }\n  },\n  drawHorizontalRuler() {\n    const offset = this.hasVerticalRuler() ? RULER_WIDTH : 0;\n\n    this.root.instance\n      .rect(offset, 0, this.width, RULER_WIDTH)\n      .fill(RULER_COLOR)\n      .moveTo(this.hasVerticalRuler() ? RULER_WIDTH : 0, RULER_WIDTH)\n      .lineTo(this.width, RULER_WIDTH)\n      .stroke(LINE_COLOR);\n\n    const hRange = range(this.width, this.getHorizontalSteps());\n\n    hRange.map(step => {\n      this.root.instance\n        .moveTo(offset + step, 0)\n        .lineTo(offset + step, RULER_WIDTH)\n        .stroke(LINE_COLOR)\n        .fillColor('black')\n        .text(`${Math.round(step)}`, offset + step + 1, 1);\n    });\n\n    hRange.map(step => {\n      if (step !== 0) {\n        this.root.instance\n          .moveTo(offset + step, RULER_WIDTH)\n          .lineTo(offset + step, this.height)\n          .stroke(GRID_COLOR);\n      }\n    });\n  },\n  drawVerticalRuler() {\n    const offset = this.hasHorizontalRuler() ? RULER_WIDTH : 0;\n\n    this.root.instance\n      .rect(0, offset, RULER_WIDTH, this.height)\n      .fill(RULER_COLOR)\n      .moveTo(RULER_WIDTH, this.hasHorizontalRuler() ? RULER_WIDTH : 0)\n      .lineTo(RULER_WIDTH, this.height)\n      .stroke(LINE_COLOR);\n\n    const vRange = range(this.height, this.getVerticalSteps());\n\n    vRange.map(step => {\n      this.root.instance\n        .moveTo(0, offset + step)\n        .lineTo(RULER_WIDTH, offset + step)\n        .stroke(LINE_COLOR)\n        .fillColor('black')\n        .text(`${Math.round(step)}`, 1, offset + step + 1);\n    });\n\n    vRange.map(step => {\n      if (step !== 0) {\n        this.root.instance\n          .moveTo(RULER_WIDTH, offset + step)\n          .lineTo(this.width, offset + step)\n          .stroke(GRID_COLOR);\n      }\n    });\n  },\n};\n\nexport default Ruler;\n","import { Fragment } from 'react';\nimport warning from 'fbjs/lib/warning';\nimport Base from './Base';\nimport TextInstance from './TextInstance';\nimport StyleSheet from '../stylesheet';\nimport getPageSize from '../utils/pageSizes';\nimport Ruler from '../mixins/ruler';\nimport { createInstance } from './index';\n\nclass Page extends Base {\n  static defaultProps = {\n    size: 'A4',\n    orientation: 'portrait',\n    style: {},\n    wrap: true,\n  };\n\n  constructor(root, props) {\n    super(root, props);\n\n    this._size = null;\n  }\n\n  get name() {\n    return 'Page';\n  }\n\n  get document() {\n    return this.parent;\n  }\n\n  get page() {\n    return this;\n  }\n\n  get orientation() {\n    return this.props.orientation;\n  }\n\n  get size() {\n    if (this._size) {\n      return this._size;\n    }\n\n    this._size = getPageSize(this.props.size, this.orientation);\n\n    // Adjust size for ruler\n    if (this.hasHorizontalRuler()) {\n      this._size.width += this.getRulerWidth();\n    }\n\n    if (this.hasVerticalRuler()) {\n      this._size.height += this.getRulerWidth();\n    }\n\n    return this._size;\n  }\n\n  resetMargins() {\n    if (\n      !!this.style.marginTop ||\n      !!this.style.marginBottom ||\n      !!this.style.marginLeft ||\n      !!this.style.marginRight\n    ) {\n      warning(\n        false,\n        'Margin values are not allowed on Page element. Use padding instead.',\n      );\n\n      this.style.marginTop = 0;\n      this.style.marginBottom = 0;\n      this.style.marginLeft = 0;\n      this.style.marginRight = 0;\n    }\n  }\n\n  applyProps() {\n    this.top = 0;\n    this.left = 0;\n    this.style = StyleSheet.resolve(this.props.style);\n\n    this.resetMargins();\n\n    this.layout.setWidth(this.size.width);\n\n    // Add some padding if ruler present, so we can see the whole page inside it\n    const rulerWidth = this.getRulerWidth();\n    const { paddingTop = 0, paddingLeft = 0 } = this.style;\n\n    if (this.hasHorizontalRuler()) {\n      this.style.paddingTop = paddingTop + rulerWidth;\n    }\n\n    if (this.hasVerticalRuler()) {\n      this.style.paddingLeft = paddingLeft + rulerWidth;\n    }\n\n    super.applyProps();\n  }\n\n  async addDynamicChild(parent, elements) {\n    if (!elements) return;\n    const children = Array.isArray(elements) ? elements : [elements];\n\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      const { type, props } = child;\n\n      if (typeof child === 'string') {\n        const instance = new TextInstance(this.root, child);\n        parent.appendChild(instance);\n      } else if (type !== Fragment) {\n        const instance = createInstance(child, this.root);\n        await instance.onAppendDynamically();\n        parent.appendChild(instance);\n        instance.applyProps();\n        await this.addDynamicChild(instance, props.children);\n      } else {\n        await this.addDynamicChild(parent, props.children);\n      }\n    }\n  }\n\n  async renderDynamicNodes(props, cb) {\n    const listToExplore = this.children.slice(0);\n\n    while (listToExplore.length > 0) {\n      const node = listToExplore.shift();\n      const condition = cb ? cb(node) : true;\n\n      if (condition && node.props.render) {\n        node.removeAllChilds();\n        const elements = node.props.render(props);\n        await this.addDynamicChild(node, elements);\n        if (!node.fixed) node.props.render = null;\n        continue;\n      }\n\n      if (node.children) {\n        listToExplore.push(...node.children);\n      }\n    }\n  }\n\n  async nodeWillWrap(props) {\n    await this.renderDynamicNodes(props);\n    this.calculateLayout();\n  }\n\n  onNodeSplit(height, clone) {\n    clone.marginTop = 0;\n    this.marginBottom = 0;\n    this.calculateLayout();\n  }\n\n  update(newProps) {}\n\n  clone() {\n    const clone = super.clone();\n    clone._size = this.size;\n    return clone;\n  }\n\n  async render() {\n    const { instance } = this.root;\n\n    this.height = this.size.height;\n    this.calculateLayout();\n\n    instance.addPage({\n      size: [this.size.width, this.size.height],\n      margin: 0,\n    });\n\n    if (this.style.backgroundColor) {\n      instance\n        .fillColor(this.style.backgroundColor)\n        .rect(0, 0, this.size.width, this.size.height)\n        .fill();\n    }\n\n    await this.renderChildren();\n\n    if (this.props.debug) this.debug();\n\n    this.renderRuler();\n  }\n}\n\nObject.assign(Page.prototype, Ruler);\n\nexport default Page;\n","import Base from './Base';\n\nclass View extends Base {\n  static defaultProps = {\n    style: {},\n    wrap: true,\n  };\n\n  get name() {\n    return 'View';\n  }\n\n  async render() {\n    this.root.instance.save();\n    this.applyTransformations();\n    this.drawBackgroundColor();\n    this.drawBorders();\n    await this.renderChildren();\n    if (this.props.debug) this.debug();\n    this.root.instance.restore();\n  }\n}\n\nexport default View;\n","const PROTOCOL_REGEXP = /^(http|https|ftp|ftps|mailto)\\:\\/\\//i;\n\nexport const getURL = value => {\n  let src = value;\n\n  if (typeof src === 'string' && !src.match(PROTOCOL_REGEXP)) {\n    src = `http://${src}`;\n  }\n\n  return src;\n};\n","const IGNORABLE_CODEPOINTS = [\n  8232, // LINE_SEPARATOR\n  8233, // PARAGRAPH_SEPARATOR\n];\n\nconst buildSubsetForFont = font =>\n  IGNORABLE_CODEPOINTS.reduce((acc, codePoint) => {\n    if (font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {\n      return acc;\n    }\n    return [...acc, String.fromCharCode(codePoint)];\n  }, []);\n\nexport const ignoreChars = fragments =>\n  fragments.map(fragment => {\n    const charSubset = buildSubsetForFont(fragment.attributes.font);\n    const subsetRegex = new RegExp(charSubset.join('|'));\n\n    return {\n      string: fragment.string.replace(subsetRegex, ''),\n      attributes: fragment.attributes,\n    };\n  });\n","import upperFirst from 'lodash.upperfirst';\nimport { AttributedString } from '../layout';\nimport Font from '../font';\nimport { embedEmojis } from './emoji';\nimport { ignoreChars } from './ignorableChars';\n\nconst PREPROCESSORS = [ignoreChars, embedEmojis];\n\nconst transformText = (text, transformation) => {\n  switch (transformation) {\n    case 'uppercase':\n      return text.toUpperCase();\n    case 'lowercase':\n      return text.toLowerCase();\n    case 'capitalize':\n      return upperFirst(text);\n    default:\n      return text;\n  }\n};\n\nexport const getFragments = instance => {\n  let fragments = [];\n  const {\n    color = 'black',\n    fontFamily = 'Helvetica',\n    fontSize = 18,\n    textAlign = 'left',\n    position,\n    top,\n    bottom,\n    lineHeight,\n    textDecoration,\n    textDecorationColor,\n    textDecorationStyle,\n    textTransform,\n    letterSpacing,\n  } = instance.getComputedStyles();\n\n  instance.children.forEach(child => {\n    if (child.value !== null && child.value !== undefined) {\n      const obj = Font.getFont(fontFamily);\n      const font = obj ? obj.data : fontFamily;\n      const string = transformText(child.value, textTransform);\n\n      fragments.push({\n        string,\n        attributes: {\n          font,\n          color,\n          fontSize,\n          align: textAlign,\n          link: instance.src,\n          characterSpacing: letterSpacing,\n          underlineStyle: textDecorationStyle,\n          underline: textDecoration === 'underline',\n          underlineColor: textDecorationColor || color,\n          lineHeight: lineHeight ? lineHeight * fontSize : null,\n          yOffset: position === 'relative' ? -top || bottom || 0 : null,\n        },\n      });\n    } else {\n      if (child) {\n        fragments.push(...getFragments(child));\n      }\n    }\n  });\n\n  for (const preprocessor of PREPROCESSORS) {\n    fragments = preprocessor(fragments);\n  }\n\n  return fragments;\n};\n\nexport const getAttributedString = instance => {\n  return AttributedString.fromFragments(getFragments(instance)).trim();\n};\n","import Yoga from 'yoga-layout-prebuilt';\nimport createPDFRenderer from '@textkit/pdf-renderer';\nimport Base from './Base';\nimport Font from '../font';\nimport { getURL } from '../utils/url';\nimport { LayoutEngine, Rect, Path, Container } from '../layout';\nimport { getAttributedString } from '../utils/attributedString';\n\nconst INFINITY = 999999;\nconst PDFRenderer = createPDFRenderer({ Rect });\n\nclass Text extends Base {\n  static defaultProps = {\n    wrap: true,\n    widows: 2,\n    orphans: 2,\n  };\n\n  constructor(root, props) {\n    super(root, props);\n\n    this.start = 0;\n    this.end = 0;\n    this.computed = false;\n    this._container = null;\n    this._attributedString = null;\n    this._layoutEngine = null;\n    this.renderCallback = props.render;\n    this.layout.setMeasureFunc(this.measureText.bind(this));\n  }\n\n  get name() {\n    return 'Text';\n  }\n\n  get src() {\n    return getURL(this.props.src || this.props.href);\n  }\n\n  get attributedString() {\n    if (!this._attributedString) {\n      this._attributedString = getAttributedString(this);\n    }\n    return this._attributedString;\n  }\n\n  set attributedString(value) {\n    this._attributedString = value;\n  }\n\n  get container() {\n    const lines = this._container.blocks.reduce(\n      (acc, block) => [...acc, ...block.lines],\n      [],\n    );\n\n    return {\n      ...this._container,\n      blocks: [{ lines: lines.splice(this.start, this.end) }],\n    };\n  }\n\n  get lines() {\n    if (!this.container) return [];\n\n    return this.container.blocks.reduce(\n      (acc, block) => [...acc, ...block.lines],\n      [],\n    );\n  }\n\n  get linesHeight() {\n    if (!this._container) return -1;\n    return this.lines.reduce((acc, line) => acc + line.height, 0);\n  }\n\n  get linesWidth() {\n    if (!this._container) return -1;\n    return Math.max(...this.lines.map(line => line.advanceWidth));\n  }\n\n  get layoutEngine() {\n    if (!this._layoutEngine) {\n      const { hyphenationPenalty } = this.props;\n      const hyphenationCallback = Font.getHyphenationCallback();\n      this._layoutEngine = new LayoutEngine({\n        hyphenationCallback,\n        hyphenationPenalty,\n      });\n    }\n\n    return this._layoutEngine;\n  }\n\n  set layoutEngine(instance) {\n    this._layoutEngine = instance;\n  }\n\n  appendChild(child) {\n    if (child) {\n      child.parent = this;\n      this.children.push(child);\n      this.computed = false;\n      this._attributedString = null;\n      this.markDirty();\n    }\n  }\n\n  removeChild(child) {\n    const index = this.children.indexOf(child);\n\n    if (index !== -1) {\n      child.parent = null;\n      this.children.splice(index, 1);\n      this.computed = false;\n      this._attributedString = null;\n      this.markDirty();\n    }\n  }\n\n  lineIndexAtHeight(height) {\n    let counter = 0;\n    for (let i = 0; i < this.lines.length; i++) {\n      const line = this.lines[i];\n\n      if (counter + line.height > height) {\n        return i;\n      }\n\n      counter += line.height;\n    }\n\n    return this.lines.length;\n  }\n\n  heightAtLineIndex(index) {\n    let counter = 0;\n\n    for (let i = 0; i < index; i++) {\n      const line = this.lines[i];\n      counter += line.height;\n    }\n\n    return counter;\n  }\n\n  layoutText(width, height) {\n    // IF height null or NaN, we take some liberty on layout height\n    height = height || INFINITY;\n\n    // Text layout is expensive. That's why we ensure to only do it once\n    // (except dynamic nodes. Those change content and needs to relayout every time)\n    if (!this._container || this.props.render) {\n      const path = new Path().rect(0, 0, width, height);\n      const container = new Container(path);\n      const attributedString = this.attributedString;\n\n      // Do the actual text layout\n      this.layoutEngine.layout(attributedString, [container]);\n      this._container = container;\n    }\n\n    // Get the total amount of rendered lines\n    const linesCount = this._container.blocks.reduce(\n      (acc, block) => acc + block.lines.length,\n      0,\n    );\n\n    this.computed = true;\n    this.end = linesCount + 1;\n  }\n\n  measureText(width, widthMode, height, heightMode) {\n    if (widthMode === Yoga.MEASURE_MODE_EXACTLY) {\n      this.layoutText(width);\n\n      return { height: this.style.flexGrow ? NaN : this.linesHeight };\n    }\n\n    if (\n      widthMode === Yoga.MEASURE_MODE_AT_MOST ||\n      heightMode === Yoga.MEASURE_MODE_AT_MOST\n    ) {\n      this.layoutText(width, height);\n\n      return {\n        height: this.linesHeight,\n        width: Math.min(width, this.linesWidth),\n      };\n    }\n\n    return {};\n  }\n\n  getComputedStyles() {\n    const styles = super.getComputedStyles();\n\n    // Inherit relative positioning for inline childs\n    if (\n      this.parent &&\n      this.parent.name === 'Text' &&\n      this.parent.style.position === 'relative'\n    ) {\n      styles.top = styles.top || this.parent.style.top;\n      styles.bottom = styles.bottom || this.parent.style.bottom;\n      styles.position = styles.position || 'relative';\n    }\n\n    // Apply default link styles\n    if (this.src) {\n      styles.color = styles.color || 'blue';\n      styles.textDecoration = styles.textDecoration || 'underline';\n    }\n\n    return styles;\n  }\n\n  wrapHeight(height) {\n    const { orphans, widows } = this.props;\n    const linesQuantity = this.lines.length;\n    const sliceHeight = height - this.paddingTop;\n    const slicedLine = this.lineIndexAtHeight(sliceHeight);\n\n    if (linesQuantity < orphans) {\n      return height;\n    } else if (slicedLine < orphans || linesQuantity < orphans + widows) {\n      return 0;\n    } else if (linesQuantity === orphans + widows) {\n      return this.heightAtLineIndex(orphans - 1);\n    } else if (linesQuantity - slicedLine < widows) {\n      return height - this.heightAtLineIndex(widows - 1);\n    }\n\n    return height;\n  }\n\n  onNodeSplit(height, clone) {\n    const wrapHeight = this.wrapHeight(height);\n    const slicedLineIndex = this.lineIndexAtHeight(wrapHeight);\n    const slicedLine = this.lines[slicedLineIndex - 1];\n\n    clone.marginTop = 0;\n    clone.paddingTop = 0;\n    clone.start = slicedLineIndex;\n    clone.attributedString = this.attributedString.slice(\n      slicedLine ? slicedLine.stringEnd : 0,\n      this.attributedString.length,\n    );\n\n    this.height = wrapHeight;\n    this.marginBottom = 0;\n    this.paddingBottom = 0;\n    this.end = slicedLineIndex;\n  }\n\n  clone() {\n    const text = super.clone();\n\n    text.layoutEngine = this.layoutEngine;\n\n    // Save calculated layout for non-dynamic clone elements\n    if (!this.props.render && !this.props.fixed) {\n      text._container = this._container;\n    }\n\n    return text;\n  }\n\n  async render() {\n    this.root.instance.save();\n    this.applyTransformations();\n    this.drawBackgroundColor();\n    this.drawBorders();\n\n    // Calculate text layout if needed\n    // This can happen if measureText was not called by Yoga\n    if (!this.computed) {\n      this.layoutText(\n        this.width - this.padding.left - this.padding.right,\n        this.height - this.padding.top - this.padding.bottom,\n      );\n    }\n\n    const padding = this.padding;\n    const { top, left } = this.getAbsoluteLayout();\n\n    // We translate lines based on Yoga container\n    const initialX = this.lines[0] ? this.lines[0].rect.y : 0;\n\n    this.lines.forEach(line => {\n      line.rect.x += left + padding.left;\n      line.rect.y += top + padding.top - initialX;\n    });\n\n    const renderer = new PDFRenderer(this.root.instance, {\n      outlineLines: false,\n    });\n\n    renderer.render(this.container);\n\n    if (this.props.debug) {\n      this.debug();\n    }\n\n    this.root.instance.restore();\n  }\n}\n\nexport default Text;\n","import Base from './Base';\nimport { getURL } from '../utils/url';\n\nclass Link extends Base {\n  get name() {\n    return 'Link';\n  }\n\n  get src() {\n    return getURL(this.props.src || this.props.href);\n  }\n\n  async render() {\n    const { top, left, width, height } = this.getAbsoluteLayout();\n    this.root.instance.link(left, top, width, height, this.src);\n    await this.renderChildren();\n    if (this.props.debug) this.debug();\n  }\n}\n\nexport default Link;\n","import Base from './Base';\n\nclass Note extends Base {\n  static defaultProps = {};\n\n  get name() {\n    return 'Note';\n  }\n\n  appendChild(child) {\n    if (child.name !== 'TextInstance') {\n      throw new Error('Note only accepts string children');\n    }\n\n    if (child) {\n      child.parent = this;\n      this.children.push(child);\n    }\n  }\n\n  removeChild(child) {\n    const index = this.children.indexOf(child);\n\n    if (index !== -1) {\n      child.parent = null;\n      this.children.splice(index, 1);\n    }\n  }\n\n  applyProps() {\n    super.applyProps();\n    this.height = 0;\n    this.width = 0;\n  }\n\n  async render() {\n    const { top, left } = this.getAbsoluteLayout();\n    const value = this.children[0] ? this.children[0].value : '';\n\n    this.root.instance.note(left, top, 0, 0, value);\n  }\n}\n\nexport default Note;\n","import Yoga from 'yoga-layout-prebuilt';\nimport warning from 'fbjs/lib/warning';\nimport Base from './Base';\nimport { resolveImage } from '../utils/image';\n\nconst SAFETY_HEIGHT = 10;\n\n// We manage two bounding boxes in this class:\n//  - Yoga node: Image bounding box. Adjust based on image and page size\n//  - Image node: Real image container. In most cases equals Yoga node, except if image is bigger than page\nclass Image extends Base {\n  static defaultProps = {\n    wrap: false,\n    cache: true,\n  };\n\n  constructor(root, props) {\n    super(root, props);\n\n    this.image = null;\n    this.layout.setMeasureFunc(this.measureImage.bind(this));\n  }\n\n  get name() {\n    return 'Image';\n  }\n\n  shouldGrow() {\n    return !!this.getComputedStyles().flexGrow;\n  }\n\n  measureImage(width, widthMode, height, heightMode) {\n    const imageMargin = this.margin;\n    const pagePadding = this.page.padding;\n    const pageArea =\n      this.page.size.height -\n      pagePadding.top -\n      pagePadding.bottom -\n      imageMargin.top -\n      imageMargin.bottom -\n      SAFETY_HEIGHT;\n\n    // Skip measure if image data not present yet\n    if (!this.image) return { width: 0, height: 0 };\n\n    if (\n      widthMode === Yoga.MEASURE_MODE_EXACTLY &&\n      heightMode === Yoga.MEASURE_MODE_UNDEFINED\n    ) {\n      const scaledHeight = width / this.ratio;\n      return { height: Math.min(pageArea, scaledHeight) };\n    }\n\n    if (\n      heightMode === Yoga.MEASURE_MODE_EXACTLY &&\n      (widthMode === Yoga.MEASURE_MODE_AT_MOST ||\n        widthMode === Yoga.MEASURE_MODE_UNDEFINED)\n    ) {\n      return { width: Math.min(height * this.ratio, width) };\n    }\n\n    if (\n      widthMode === Yoga.MEASURE_MODE_EXACTLY &&\n      heightMode === Yoga.MEASURE_MODE_AT_MOST\n    ) {\n      const scaledHeight = width / this.ratio;\n      return { height: Math.min(height, pageArea, scaledHeight) };\n    }\n\n    if (\n      widthMode === Yoga.MEASURE_MODE_AT_MOST &&\n      heightMode === Yoga.MEASURE_MODE_AT_MOST\n    ) {\n      const imageWidth = Math.min(this.image.width, width);\n\n      return {\n        width: imageWidth,\n        height: imageWidth / this.ratio,\n      };\n    }\n\n    return { height, width };\n  }\n\n  get ratio() {\n    return this.image.data ? this.image.width / this.image.height : 1;\n  }\n\n  async fetch() {\n    try {\n      this.image = await resolveImage(this.props.src, this.props.cache);\n    } catch (e) {\n      this.image = { width: 0, height: 0 };\n      console.warn(e.message);\n    }\n  }\n\n  clone() {\n    const clone = super.clone();\n    clone.image = this.image;\n    return clone;\n  }\n\n  async onAppendDynamically() {\n    await this.fetch();\n  }\n\n  async render() {\n    const padding = this.padding;\n    const { left, top } = this.getAbsoluteLayout();\n\n    this.root.instance.save();\n    this.applyTransformations();\n    this.drawBackgroundColor();\n    this.drawBorders();\n\n    if (this.image.data) {\n      // Inner offset between yoga node and image box\n      // Makes image centered inside Yoga node\n      const width =\n        Math.min(this.height * this.ratio, this.width) -\n        padding.left -\n        padding.right;\n      const height = this.height - padding.top - padding.bottom;\n      const xOffset = Math.max((this.width - width) / 2, 0);\n\n      if (width !== 0 && height !== 0) {\n        this.root.instance.image(\n          this.image.data,\n          left + padding.left + xOffset,\n          top + padding.top,\n          { width, height },\n        );\n      } else {\n        warning(\n          false,\n          `Image with src '${\n            this.props.src\n          }' skipped due to invalid dimensions`,\n        );\n      }\n    }\n\n    if (this.props.debug) {\n      this.debug();\n    }\n\n    this.root.instance.restore();\n  }\n}\n\nexport default Image;\n","import Root from './Root';\nimport Document from './Document';\nimport Page from './Page';\nimport View from './View';\nimport Text from './Text';\nimport Link from './Link';\nimport Note from './Note';\nimport Image from './Image';\nimport TextInstance from './TextInstance';\n\nconst constructors = {\n  ROOT: Root,\n  PAGE: Page,\n  TEXT: Text,\n  LINK: Link,\n  VIEW: View,\n  NOTE: Note,\n  IMAGE: Image,\n  DOCUMENT: Document,\n  TEXT_INSTANCE: TextInstance,\n};\n\nfunction createInstance(element, root) {\n  const { type, props = {} } = element;\n\n  if (constructors[type]) {\n    return new constructors[type](root, props);\n  }\n\n  throw new Error(`Invalid element of type ${type} passed to PDF renderer`);\n}\n\nexport { createInstance };\n","'use strict';\n\nimport ReactFiberReconciler from 'react-reconciler';\nimport emptyObject from 'fbjs/lib/emptyObject';\nimport { createInstance } from './elements';\n\nconst objectsEqual = (a, b) => {\n  const oldPropsKeys = Object.keys(a);\n  const newPropsKeys = Object.keys(b);\n\n  if (oldPropsKeys.length !== newPropsKeys.length) {\n    return false;\n  }\n\n  for (let i = 0; i < oldPropsKeys.length; i++) {\n    const propName = oldPropsKeys[i];\n\n    if (propName === 'render') {\n      if (!a[propName] !== !b[propName]) {\n        return false;\n      }\n      continue;\n    }\n\n    if (propName !== 'children' && a[propName] !== b[propName]) {\n      if (\n        typeof a[propName] === 'object' &&\n        typeof b[propName] === 'object' &&\n        objectsEqual(a[propName], b[propName])\n      ) {\n        continue;\n      }\n\n      return false;\n    }\n  }\n\n  return true;\n};\n\n// If the Link has a strign child or render prop, substitute the instance by a Text,\n// that will ultimately render the inline Link via the textkit PDF renderer.\nconst shouldReplaceLink = (type, props) =>\n  type === 'LINK' &&\n  (typeof props.children === 'string' ||\n    Array.isArray(props.children) ||\n    props.render);\n\nconst PDFRenderer = ReactFiberReconciler({\n  supportsMutation: true,\n  appendInitialChild(parentInstance, child) {\n    parentInstance.appendChild(child);\n  },\n\n  createInstance(type, props, internalInstanceHandle) {\n    const instanceType = shouldReplaceLink(type, props) ? 'TEXT' : type;\n    return createInstance(\n      { type: instanceType, props },\n      internalInstanceHandle,\n    );\n  },\n\n  createTextInstance(text, rootContainerInstance) {\n    return createInstance(\n      { type: 'TEXT_INSTANCE', props: text },\n      rootContainerInstance,\n    );\n  },\n\n  finalizeInitialChildren(element, type, props) {\n    return false;\n  },\n\n  getPublicInstance(instance) {\n    return instance;\n  },\n\n  prepareForCommit() {\n    // Noop\n  },\n\n  prepareUpdate(element, type, oldProps, newProps) {\n    return !objectsEqual(oldProps, newProps);\n  },\n\n  resetAfterCommit() {\n    // Noop\n  },\n\n  resetTextContent(element) {\n    // Noop\n  },\n\n  getRootHostContext() {\n    return emptyObject;\n  },\n\n  getChildHostContext() {\n    return emptyObject;\n  },\n\n  shouldSetTextContent(type, props) {\n    return false;\n  },\n\n  now: Date.now,\n\n  useSyncScheduling: true,\n\n  appendChild(parentInstance, child) {\n    parentInstance.appendChild(child);\n  },\n\n  appendChildToContainer(parentInstance, child) {\n    parentInstance.appendChild(child);\n  },\n\n  removeChild(parentInstance, child) {\n    parentInstance.removeChild(child);\n  },\n\n  removeChildFromContainer(parentInstance, child) {\n    parentInstance.removeChild(child);\n  },\n\n  commitTextUpdate(textInstance, oldText, newText) {\n    textInstance.update(newText);\n  },\n\n  commitUpdate(instance, updatePayload, type, oldProps, newProps) {\n    instance.update(newProps);\n  },\n});\n\nexport default PDFRenderer;\n","import BlobStream from 'blob-stream';\nimport PDFRenderer from './renderer';\nimport StyleSheet from './stylesheet';\nimport { createInstance } from './elements';\nimport Font from './font';\nimport { version } from '../package.json';\n\nconst View = 'VIEW';\nconst Text = 'TEXT';\nconst Link = 'LINK';\nconst Page = 'PAGE';\nconst Note = 'NOTE';\nconst Image = 'IMAGE';\nconst Document = 'DOCUMENT';\n\nconst pdf = input => {\n  const container = createInstance({ type: 'ROOT' });\n  const mountNode = PDFRenderer.createContainer(container);\n\n  if (input) updateContainer(input);\n\n  function isDirty() {\n    return container.isDirty;\n  }\n\n  function updateContainer(doc) {\n    PDFRenderer.updateContainer(doc, mountNode, null);\n  }\n\n  async function toBlob() {\n    await container.render();\n\n    const stream = container.instance.pipe(BlobStream());\n\n    return new Promise((resolve, reject) => {\n      stream.on('finish', () => {\n        try {\n          const blob = stream.toBlob('application/pdf');\n\n          if (container.document.props.onRender) {\n            container.document.props.onRender({ blob });\n          }\n\n          resolve(blob);\n        } catch (error) {\n          reject(error);\n        }\n      });\n\n      stream.on('error', reject);\n    });\n  }\n\n  function toBuffer() {\n    if (container.document.props.onRender) {\n      container.document.props.onRender();\n    }\n\n    container.render();\n\n    return container.instance;\n  }\n\n  function toString() {\n    let result = '';\n    container.render();\n\n    return new Promise((resolve, reject) => {\n      try {\n        container.instance.on('data', function(buffer) {\n          result += buffer;\n        });\n\n        container.instance.on('end', function() {\n          if (container.document.props.onRender) {\n            container.document.props.onRender({ string: result });\n          }\n\n          resolve(result);\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  return {\n    isDirty,\n    updateContainer,\n    toBuffer,\n    toBlob,\n    toString,\n  };\n};\n\nexport {\n  version,\n  PDFRenderer,\n  View,\n  Text,\n  Link,\n  Page,\n  Font,\n  Note,\n  Image,\n  Document,\n  StyleSheet,\n  createInstance,\n  pdf,\n};\n","import fs from 'fs';\nimport {\n  pdf,\n  View,\n  Text,\n  Link,\n  Page,\n  Font,\n  Note,\n  Image,\n  version,\n  Document,\n  StyleSheet,\n  PDFRenderer,\n  createInstance,\n} from './index';\n\nexport const renderToStream = function(element) {\n  return pdf(element).toBuffer();\n};\n\nexport const renderToFile = function(element, filePath, callback) {\n  const output = renderToStream(element);\n  const stream = fs.createWriteStream(filePath);\n\n  output.pipe(stream);\n\n  return new Promise((resolve, reject) => {\n    stream.on('finish', () => {\n      if (callback) callback(output, filePath);\n      resolve(output);\n    });\n    stream.on('error', reject);\n  });\n};\n\nconst throwEnvironmentError = name => {\n  throw new Error(\n    `${name} is a web specific API. Or you're either using this component on Node, or your bundler is not loading react-pdf from the appropiate web build.`,\n  );\n};\n\nexport const PDFViewer = () => {\n  throwEnvironmentError('PDFViewer');\n};\n\nexport const PDFDownloadLink = () => {\n  throwEnvironmentError('PDFDownloadLink');\n};\n\nexport const BlobProvider = () => {\n  throwEnvironmentError('BlobProvider');\n};\n\nexport const render = renderToFile;\n\nexport {\n  pdf,\n  View,\n  Text,\n  Link,\n  Page,\n  Font,\n  Note,\n  Image,\n  version,\n  Document,\n  StyleSheet,\n  PDFRenderer,\n  createInstance,\n} from './index';\n\nexport default {\n  pdf,\n  View,\n  Text,\n  Link,\n  Page,\n  Font,\n  Note,\n  Image,\n  version,\n  Document,\n  StyleSheet,\n  PDFRenderer,\n  createInstance,\n  renderToStream,\n  renderToFile,\n  render,\n};\n"],"names":["Root","isDirty","document","instance","child","PDFDocument","autoFirstPage","this","render","fetch","src","then","response","buffer","arrayBuffer","Buffer","from","emojiSource","hyphenationCallback","fonts","register","family","otherOptions","registerHyphenationCallback","callback","registerEmojiSource","url","format","getRegisteredFonts","_Object$keys","getFont","getEmojiSource","getHyphenationCallback","load","async","fontFamily","doc","font","data","loading","isUrl","fetchFont","fontkit","create","openSync","loaded","registerFont","standardFonts","includes","Error","reset","hasOwnProperty","clear","StandardFont","name","PDFFont","open","glyphs","str","encoded","positions","encode","map","_","i","g","glyph","getGlyph","parseInt","advanceWidth","codePoint","id","characterToGlyph","ascender","descender","lineGap","Run","fallbackFontInstance","string","runs","res","lastFont","lastIndex","index","run","defaultFont","attributes","length","push","char","slice","start","end","codePointAt","hasGlyphForCodePoint","fallbackFont","Node","prev","next","toString","LinkedList","head","tail","listSize","node","isEmpty","last","toArray","result","fun","n","isLinked","listLength","newNode","unshift","insertAfter","insertBefore","linebreak","nodes","lines","settings","options","demerits","line","flagged","fitness","tolerance","activeNodes","sum","lineLengths","breaks","tmp","Infinity","breakpoint","position","ratio","fitnessClass","totals","previous","computeCost","active","currentLine","width","stretch","shrink","lineLength","type","infinity","computeSum","breakPointIndex","penalty","mainLoop","badness","tmpSum","candidate","first","candidates","currentClass","remove","Math","pow","abs","undefined","forEach","size","reverse","glue","box","value","hyphenated","SOFT_HYPHEN_HEX","NO_BREAK_SPACE_DECIMAL","getWords","glyphString","words","codePointAtGlyphIndex","isWhiteSpace","word","h","Hypher","english","hyphenateString","split","hyphenate","hyphenateWord","part","formatter","measureText","textAlign","spaceWidth","hyphenWidth","hyphenPenalty","opts","spaceStretch","spaceShrink","array","partIndex","partArray","isLastPart","HYPHEN","TOLERANCE_STEPS","TOLERANCE_LIMIT","Textkit","fallbackLinebreaker","createLinebreaker","availableWidth","paragraphStyle","measureWidth","align","fallback","suggestLineBreak","glyphIndexAtOffset","insertGlyph","breakNode","findBreakNode","breakIndex","fontSize","glyphRuns","scale","unitsPerEm","layout","xAdvance","shrinkWhitespaceFactor","before","after","LayoutEngine","BaseLayoutEngine","hyphenationPenalty","scriptItemizer","textDecorationEngine","lineFragmentGenerator","fontSubstitutionEngine","justificationEngine","lineBreaker","MARKERS","JPEG","height","readUInt16BE","marker","pos","createCache","limit","cache","keys","key","shift","imagesCache","isValidFormat","lower","toLowerCase","isCompatibleBase64","test","getImage","body","extension","PNG","resolveBase64Image","match","exec","resolve","resolveLocalImage","_JSON$stringify","resolveRemoteImage","constructor","isPng","isJpg","resolveImage","get","image","set","emojis","regex","emojiRegex","reflect","promise","args","v","e","fetchEmojiImage","getCodePoints","_Array$from","join","buildEmojiUrl","emoji","Font","fetchEmojis","promises","emojiUrl","embedEmojis","fragments","fragment","emojiSize","chunk","replace","Attachment","CHARACTER","floor","String","fromCharCode","Document","root","props","children","parent","indexOf","title","author","subject","keywords","creator","producer","info","Title","Author","Subject","Keywords","Creator","Producer","listToExplore","style","childNode","_Promise","all","loadFonts","loadImages","applyProps","newProps","pageCount","pages","page","wrapArea","paddingBottom","wrap","subpages","wrapPages","j","renderDynamicNodes","addMetaData","loadEmojis","loadAssets","renderPages","defaultProps","PERCENT","computed","Yoga","createDefault","insertChild","getChildCount","splice","removeChild","attr","fixedMethod","upperFirst","percentMethod","isPercent","edge","setPositionPercent","setPosition","setPaddingPercent","setPadding","setMarginPercent","setMargin","setBorder","parentLayout","getAbsoluteLayout","left","top","copyStyle","calculateLayout","markDirty","getPositionType","POSITION_TYPE_ABSOLUTE","getComputedTop","getComputedLeft","getComputedRight","getComputedBottom","getComputedWidth","getMinWidth","getMaxWidth","getComputedHeight","getMinHeight","getMaxHeight","getComputedPadding","EDGE_TOP","EDGE_RIGHT","EDGE_BOTTOM","EDGE_LEFT","getComputedMargin","getComputedBorder","paddingTop","paddingRight","paddingLeft","marginTop","marginRight","marginBottom","marginLeft","setPositionType","POSITION_TYPE_RELATIVE","setDimension","yogaValue","prop","isAlignType","ALIGN_AUTO","DISPLAY_FLEX","DISPLAY_NONE","FLEX_DIRECTION_ROW","FLEX_DIRECTION_ROW_REVERSE","FLEX_DIRECTION_COLUMN","FLEX_DIRECTION_COLUMN_REVERSE","ALIGN_STRETCH","ALIGN_BASELINE","JUSTIFY_SPACE_AROUND","ALIGN_SPACE_AROUND","JUSTIFY_SPACE_BETWEEN","ALIGN_SPACE_BETWEEN","WRAP_WRAP","WRAP_WRAP_REVERSE","WRAP_NO_WRAP","JUSTIFY_FLEX_START","ALIGN_FLEX_START","JUSTIFY_FLEX_END","ALIGN_FLEX_END","JUSTIFY_CENTER","ALIGN_CENTER","parseValue","parseFloat","unit","parseScalar","scalar","Object","prototype","styleShortHands","expandStyles","propsArray","resolvedStyle","verticalAlign","expandedProps","propName","call","matchBorderShorthand","processBorders","transformStyles","expandedStyles","resolved","styles","flatten","input","Array","isArray","reduce","acc","resolveMediaQueries","container","matchMedia","[object Object]","absoluteFillObject","Debug","padding","margin","save","debugContent","debugPadding","debugMargin","debugText","restore","roundedWidth","round","right","roundedHeight","bottom","opacity","fillColor","text","max","rect","fill","Borders","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","borderTopStyle","borderRightStyle","borderBottomStyle","borderLeftStyle","getComputedStyles","drawHorizontalBorder","drawVerticalBorder","dash","space","stroke","p1","p2","r1","r2","color","lineWidth","moveTo","quadraticCurveTo","lineTo","strokeColor","traceBorder","getRotation","transform","PI","getTranslateX","matchX","matchGeneric","getTranslateY","matchY","getScaleX","getScaleY","getMatrix","applySingleTransformation","element","origin","rotate","translate","Transformations","re","inheritedProperties","Base","merge","break","fixed","minPresenceAhead","orientation","StyleSheet","attribute","applyStyle","setter","isFunction","inheritedStyles","pick","borderRadius","backgroundColor","roundedRect","clone","absoluteChilds","filter","absolute","nonAbsoluteChilds","_Object$assign","Transform","TextInstance","_container","PAGE_SIZES","getPageSize","toUpperCase","RULER_WIDTH","RULER_COLOR","RULER_FONT_SIZE","DEFAULT_RULER_STEPS","LINE_WIDTH","LINE_COLOR","GRID_COLOR","range","steps","ceil","matchPercentage","Ruler","ruler","horizontalRuler","verticalRuler","horizontalRulerSteps","rulerSteps","percentage","hasVerticalRuler","verticalRulerSteps","hasHorizontalRuler","drawHorizontalRuler","drawVerticalRuler","offset","hRange","getHorizontalSteps","step","vRange","getVerticalSteps","Page","_size","getRulerWidth","resetMargins","setWidth","rulerWidth","elements","appendChild","Fragment","createInstance","onAppendDynamically","addDynamicChild","cb","removeAllChilds","super","addPage","renderChildren","debug","renderRuler","View","applyTransformations","drawBackgroundColor","drawBorders","PROTOCOL_REGEXP","getURL","IGNORABLE_CODEPOINTS","buildSubsetForFont","ignoreChars","charSubset","subsetRegex","RegExp","PREPROCESSORS","transformText","transformation","getFragments","lineHeight","textDecoration","textDecorationColor","textDecorationStyle","textTransform","letterSpacing","obj","preprocessor","getAttributedString","AttributedString","fromFragments","trim","INFINITY","PDFRenderer","createPDFRenderer","Rect","Text","_attributedString","_layoutEngine","renderCallback","setMeasureFunc","bind","href","blocks","block","counter","path","Path","Container","attributedString","layoutEngine","linesCount","widthMode","heightMode","MEASURE_MODE_EXACTLY","layoutText","flexGrow","NaN","linesHeight","MEASURE_MODE_AT_MOST","min","linesWidth","orphans","widows","linesQuantity","sliceHeight","slicedLine","lineIndexAtHeight","heightAtLineIndex","wrapHeight","slicedLineIndex","stringEnd","initialX","y","x","Link","link","Note","note","SAFETY_HEIGHT","Image","measureImage","imageMargin","pagePadding","pageArea","MEASURE_MODE_UNDEFINED","scaledHeight","imageWidth","warn","message","xOffset","constructors","objectsEqual","a","b","oldPropsKeys","newPropsKeys","shouldReplaceLink","ReactFiberReconciler","parentInstance","internalInstanceHandle","rootContainerInstance","oldProps","emptyObject","Date","now","textInstance","oldText","newText","update","updatePayload","pdf","mountNode","createContainer","updateContainer","onRender","stream","pipe","BlobStream","reject","on","blob","toBlob","error","renderToStream","toBuffer","renderToFile","filePath","output","fs","createWriteStream","throwEnvironmentError","PDFViewer","PDFDownloadLink","BlobProvider"],"mappings":"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"}