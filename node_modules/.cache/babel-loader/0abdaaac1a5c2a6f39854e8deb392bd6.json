{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar FONT_WEIGHTS = {\n  thin: 100,\n  ultralight: 200,\n  light: 300,\n  normal: 400,\n  medium: 500,\n  semibold: 600,\n  bold: 700,\n  ultrabold: 800,\n  heavy: 900\n};\nvar FONT_WIDTHS = {\n  ultracondensed: 1,\n  extracondensed: 2,\n  condensed: 3,\n  semicondensed: 4,\n  normal: 5,\n  semiexpanded: 6,\n  expanded: 7,\n  extraexpanded: 8,\n  ultraexpanded: 9\n};\n\nfunction parseFont(font) {\n  // When we pass a fontkit TTFFont directly to texkit\n  if ((typeof font === 'undefined' ? 'undefined' : (0, _typeof3.default)(font)) === 'object') {\n    return {\n      family: font.familyName,\n      postscriptName: font.postscriptName\n    };\n  }\n\n  if (typeof font !== 'string') {\n    return {};\n  }\n\n  var parts = font.match(/(.+\\.(?:ttf|otf|ttc|dfont|woff|woff2))(?:#(.+))$/);\n\n  if (parts) {\n    return {\n      path: parts[1],\n      postscriptName: parts[2]\n    };\n  }\n\n  return {\n    family: font\n  };\n}\n\nfunction getFontWeight(weight) {\n  if (typeof weight === 'number') {\n    return Math.max(100, Math.min(900, Math.floor(weight / 100) * 100));\n  }\n\n  if (typeof weight === 'string') {\n    return FONT_WEIGHTS[weight.toLowerCase().replace(/-/g, '')];\n  }\n\n  return null;\n}\n\nfunction getFontWidth(width) {\n  if (typeof width === 'number') {\n    return Math.max(1, Math.min(9, width));\n  }\n\n  if (typeof width === 'string') {\n    return FONT_WIDTHS[width.toLowerCase().replace(/-/g, '')];\n  }\n\n  return null;\n}\n\nvar FontDescriptor = function () {\n  function FontDescriptor() {\n    var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    (0, _classCallCheck3.default)(this, FontDescriptor);\n    this.path = attributes.path;\n    this.postscriptName = attributes.postscriptName;\n    this.family = attributes.family;\n    this.style = attributes.style;\n    this.weight = attributes.weight;\n    this.width = attributes.width;\n    this.italic = attributes.italic;\n    this.monospace = attributes.monospace;\n  }\n\n  FontDescriptor.fromAttributes = function fromAttributes() {\n    var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (attributes.fontDescriptor) {\n      return new FontDescriptor(attributes.fontDescriptor);\n    }\n\n    var font = parseFont(attributes.font || 'Helvetica');\n    return new FontDescriptor({\n      path: font.path,\n      postscriptName: attributes.fontPostscriptName || font.postscriptName,\n      family: attributes.fontFamily || font.family,\n      style: attributes.fontStyle,\n      weight: getFontWeight(attributes.fontWeight) || (attributes.bold ? FONT_WEIGHTS.bold : null),\n      width: getFontWidth(attributes.fontWidth),\n      italic: attributes.italic,\n      monospace: attributes.monospace\n    });\n  };\n\n  return FontDescriptor;\n}();\n\nexports.default = FontDescriptor;","map":null,"metadata":{},"sourceType":"script"}