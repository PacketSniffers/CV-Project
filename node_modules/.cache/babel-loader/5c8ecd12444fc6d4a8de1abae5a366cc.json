{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _GlyphRun = require('../models/GlyphRun');\n\nvar _GlyphRun2 = _interopRequireDefault(_GlyphRun);\n\nvar _GlyphString = require('../models/GlyphString');\n\nvar _GlyphString2 = _interopRequireDefault(_GlyphString);\n\nvar _Run = require('../models/Run');\n\nvar _Run2 = _interopRequireDefault(_Run);\n\nvar _RunStyle = require('../models/RunStyle');\n\nvar _RunStyle2 = _interopRequireDefault(_RunStyle);\n\nvar _flattenRuns = require('./flattenRuns');\n\nvar _flattenRuns2 = _interopRequireDefault(_flattenRuns);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * A GlyphGenerator is responsible for mapping characters in\n * an AttributedString to glyphs in a GlyphString. It resolves\n * style attributes such as the font and Unicode script and\n * directionality properties, and creates GlyphRuns using fontkit.\n */\n\n\nvar GlyphGenerator = function () {\n  function GlyphGenerator() {\n    var engines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    (0, _classCallCheck3.default)(this, GlyphGenerator);\n    this.resolvers = [engines.fontSubstitutionEngine, engines.scriptItemizer];\n  }\n\n  GlyphGenerator.prototype.generateGlyphs = function generateGlyphs(attributedString) {\n    var _this = this; // Resolve runs\n\n\n    var runs = this.resolveRuns(attributedString); // Generate glyphs\n\n    var glyphIndex = 0;\n    var glyphRuns = runs.map(function (run) {\n      var str = attributedString.string.slice(run.start, run.end);\n      var glyphRun = run.attributes.font.layout(str, run.attributes.features, run.attributes.script);\n      var end = glyphIndex + glyphRun.glyphs.length;\n\n      var glyphIndices = _this.resolveGlyphIndices(str, glyphRun.stringIndices);\n\n      var res = new _GlyphRun2.default(glyphIndex, end, run.attributes, glyphRun.glyphs, glyphRun.positions, glyphRun.stringIndices, glyphIndices);\n\n      _this.resolveAttachments(res);\n\n      _this.resolveYOffset(res);\n\n      glyphIndex = end;\n      return res;\n    });\n    return new _GlyphString2.default(attributedString.string, glyphRuns);\n  };\n\n  GlyphGenerator.prototype.resolveGlyphIndices = function resolveGlyphIndices(string, stringIndices) {\n    var glyphIndices = [];\n\n    for (var i = 0; i < string.length; i++) {\n      for (var j = 0; j < stringIndices.length; j++) {\n        if (stringIndices[j] >= i) {\n          glyphIndices[i] = j;\n          break;\n        }\n\n        glyphIndices[i] = undefined;\n      }\n    }\n\n    var lastValue = glyphIndices[glyphIndices.length - 1];\n\n    for (var _i = glyphIndices.length - 1; _i >= 0; _i--) {\n      if (glyphIndices[_i] === undefined) {\n        glyphIndices[_i] = lastValue;\n      } else {\n        lastValue = glyphIndices[_i];\n      }\n    }\n\n    lastValue = glyphIndices[0];\n\n    for (var _i2 = 0; _i2 < glyphIndices.length; _i2++) {\n      if (glyphIndices[_i2] === undefined) {\n        glyphIndices[_i2] = lastValue;\n      } else {\n        lastValue = glyphIndices[_i2];\n      }\n    }\n\n    return glyphIndices;\n  };\n\n  GlyphGenerator.prototype.resolveRuns = function resolveRuns(attributedString) {\n    // Map attributes to RunStyle objects\n    var r = attributedString.runs.map(function (run) {\n      return new _Run2.default(run.start, run.end, new _RunStyle2.default(run.attributes));\n    }); // Resolve run ranges and additional attributes\n\n    var runs = [];\n\n    for (var _iterator = this.resolvers, _isArray = Array.isArray(_iterator), _i3 = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i3 >= _iterator.length) break;\n        _ref = _iterator[_i3++];\n      } else {\n        _i3 = _iterator.next();\n        if (_i3.done) break;\n        _ref = _i3.value;\n      }\n\n      var resolver = _ref;\n      var resolved = resolver.getRuns(attributedString.string, r);\n      runs.push.apply(runs, resolved);\n    } // Ignore resolved properties\n\n\n    var styles = attributedString.runs.map(function (run) {\n      var attrs = (0, _assign2.default)({}, run.attributes);\n      delete attrs.font;\n      delete attrs.fontDescriptor;\n      return new _Run2.default(run.start, run.end, attrs);\n    }); // Flatten runs\n\n    var resolvedRuns = (0, _flattenRuns2.default)([].concat(styles, runs));\n\n    for (var _iterator2 = resolvedRuns, _isArray2 = Array.isArray(_iterator2), _i4 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i4 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i4++];\n      } else {\n        _i4 = _iterator2.next();\n        if (_i4.done) break;\n        _ref2 = _i4.value;\n      }\n\n      var run = _ref2;\n      run.attributes = new _RunStyle2.default(run.attributes);\n    }\n\n    return resolvedRuns;\n  };\n\n  GlyphGenerator.prototype.resolveAttachments = function resolveAttachments(glyphRun) {\n    var _glyphRun$attributes = glyphRun.attributes,\n        font = _glyphRun$attributes.font,\n        attachment = _glyphRun$attributes.attachment;\n\n    if (!attachment) {\n      return;\n    }\n\n    var objectReplacement = font.glyphForCodePoint(0xfffc);\n\n    for (var i = 0; i < glyphRun.length; i++) {\n      var glyph = glyphRun.glyphs[i];\n      var position = glyphRun.positions[i];\n\n      if (glyph === objectReplacement) {\n        position.xAdvance = attachment.width;\n      }\n    }\n  };\n\n  GlyphGenerator.prototype.resolveYOffset = function resolveYOffset(glyphRun) {\n    var _glyphRun$attributes2 = glyphRun.attributes,\n        font = _glyphRun$attributes2.font,\n        yOffset = _glyphRun$attributes2.yOffset;\n\n    if (!yOffset) {\n      return;\n    }\n\n    for (var i = 0; i < glyphRun.length; i++) {\n      glyphRun.positions[i].yOffset += yOffset * font.unitsPerEm;\n    }\n  };\n\n  return GlyphGenerator;\n}();\n\nexports.default = GlyphGenerator;","map":null,"metadata":{},"sourceType":"script"}